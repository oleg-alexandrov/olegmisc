(setq fortran-comment-indent-style 'relative)
(setq fortran-continuation-string "*")
(setq fortran-comment-region "c")

(defun fortran-do ()
  (interactive)
  (save-excursion
    (beginning-of-line)
    (setq exp_ab (looking-at "[ ]*$")))
  (if (not exp_ab)
      (insert "do ")
    (insert "do ")
    (fortran-indent-line)
    (insert "\nenddo")
    (fortran-indent-line)
    (previous-line 1)
    (end-of-line)
    ))

(defun fortran-if ()
  (interactive)
  (save-excursion
    (beginning-of-line)
    (setq exp_ab (looking-at "[ ]*$")))
  (if (not exp_ab)
      (insert "if ")
    (insert "if () then ")
    (fortran-indent-line)
    (insert "\nendif")
    (fortran-indent-line)
    (previous-line 1)
    (backward-char 1)
    ))


(defun fortran-kill-line ()
        (interactive)
        (kill-line)
        (fortran-indent-line)
)
(defun fortran-uncomment-region ()
  (interactive)
  (fortran-comment-region (mark) (-(point) 1) -1)
  )

(defun smart-space ()
  (interactive)
  (if (not (expand-abbrev))
      (insert " ")
    )
  )

;(local-set-key [(control return)] 'fortran-split-line)
(local-set-key [(meta z)] 'redo)
(local-set-key [(control k)] 'fortran-kill-line)
(local-set-key [(return)] 'reindent-then-newline-and-indent)
(local-set-key [(meta c)] 'fortran-comment-region)
(local-set-key [(meta u)] 'fortran-uncomment-region)
(local-set-key [(space)] 'smart-space)
(local-set-key [(meta ?9)] 'my-insert-parantheses)
