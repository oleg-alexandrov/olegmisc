;;; perl-my.el --- 

(setq smart_equal_flag 0)

(defun perl-print ()
  (insert "print \"\\n\"\;")
  (backward-char 4)
  )

(defun perl-print-error ()
  (insert "print \"ERROR: \\n\"\;")
  (backward-char 4)
  )

(defun subst-globally ()
  (interactive)
  (insert "=~ s///g;")
  (backward-char 4)
  )

(defun tilde-subst-globally ()
  (interactive)
  (insert "=~ s///g;")
  (backward-char 4)
  )

(defun perl-foreach ()
  (interactive)
  (save-excursion
    (beginning-of-line)
    (setq empty (looking-at "[ ]*[\t]*[ ]*$")))
  (if (not empty)
      (insert "foreach ")
    (insert "foreach  (){")
    (cperl-indent-command)
    (insert "\n")
    (cperl-indent-command)
    (insert "\n}")
    (cperl-indent-command)
    (previous-line 2)
    (search-forward "(" nil t)
    (backward-char 2)
    ))

(defun perl-for ()
  (interactive)
  (save-excursion
    (beginning-of-line)
    (setq empty (looking-at "[ ]*[\t]*[ ]*$")))
  (if (not empty)
      (insert "for ")
    (insert "for ( ; ; ){")
    (indent-according-to-mode)
    (insert "\n")
    (indent-according-to-mode)
    (insert "\n}")
    (indent-according-to-mode)
    (previous-line 2)
    (search-forward "(" nil t)
    (setq smart_equal_flag 1)
    ))

(defun smart-equal ()
  (interactive)
  (if (= smart_equal_flag 0)
      (insert "=")
    (insert " =")
    (forward-char 1)
    (save-excursion
      (backward-char 2)
      (backward-word 1)
      (if (looking-at "\\(\\w+\\)")
          (let ((w (match-string 1) ))
            (search-forward "; ")
            (insert w)
            (insert " < ")
            (search-forward "; ")
            (insert w)
            (insert "++")
            )
        )
      )
    ))

(defun smart-forward ()
  (interactive)
  (if (and (= smart_equal_flag 0) (= smart_equal_flag 0))
      (forward-char 1)
    )
  
  (if (not (= smart_equal_flag 1))
      ()
    (search-forward "< " nil t)
    (setq smart_equal_flag 0)
    )

  (if (not (= smart_forward_flag 1))
      ()
    (forward-char 1)
    (insert "<<  ")
    (backward-char 1)
    (setq smart_flag 0)
    )

  (setq smart_equal_flag 0)
  (setq smart_forward_flag 0)
  )

(defun perl-if ()
  (interactive)
  (save-excursion
    (beginning-of-line)
    (setq exp_ab (looking-at "[\t]*[ ]*$")))
  (if (not exp_ab)
      (insert "if ")
    (insert "if (){")
    (indent-according-to-mode)
    (insert "\n")
    (indent-according-to-mode)
    (insert "\n}")
    (indent-according-to-mode)
    (previous-line 2)
    (search-forward "(")
    ))

(defun perl-else ()
  (interactive)
  (save-excursion
    (beginning-of-line)
    (setq exp_ab (looking-at "[\t]*[ ]*}[ ]*$")))
  (if (not exp_ab)
      (insert "else ")
    (insert "else{")
    (indent-according-to-mode)
    (insert "\n")
    (indent-according-to-mode)
    (insert "\n}")
    (indent-according-to-mode)
    (previous-line 1)
    ))

(defun perl-brace ()
  (interactive)
  (insert "{")
  (indent-according-to-mode)
  (insert "\n")
  (insert "\n}")
  (indent-according-to-mode)
  (previous-line 1)
  (indent-according-to-mode)
  )

(defun insert-square-brackets ()
  (interactive)
  (insert "[]")
  (backward-char 1)
  )

(local-set-key [(=)] 'smart-equal)
(local-set-key [(control i)] 'indent-region)
(local-set-key [(control t)] nil)
(local-set-key [(control y)] 'yank)
(local-set-key [(meta a)] 'define-mode-abbrev)
(local-set-key [(meta c)] 'comment-region)
(local-set-key [(meta q)] 'kill-this-buffer)
(local-set-key [(meta u)] 'my-uncomment-region)
(local-set-key [(return)] 'reindent-then-newline-and-indent)
(local-set-key [(meta \;)] 'insert-semicolon-and-newline)
(local-set-key [(control j)] 'my-fill-paragraph-or-region)
(local-set-key [(right)] 'smart-forward)
