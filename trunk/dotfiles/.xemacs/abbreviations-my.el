;;-*-coding: binary;-*-
(define-abbrev-table 'asm-mode-abbrev-table '(
    ))

(define-abbrev-table 'awk-mode-abbrev-table '(
    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
    ))

(define-abbrev-table 'c++-mode-abbrev-table '(
    (",," " << ' ' << " nil 475)
    (",." " << endl;" nil 301)
    ("\\c" ".clear();" nil 133)
    ("\\cd" "complex<double>" nil 8)
    ("\\cl" ".close();" nil 63)
    ("\\cp" "cout.precision(20);" nil 1)
    ("\\cs" ".c_str()" nil 32)
    ("\\do" "double " nil 772)
    ("\\dos" "double* " nil 6)
    ("\\e" "endl;" nil 3)
    ("\\f" ".front()" nil 0)
    ("\\gb" "Geom_Bln " nil 57)
    ("\\gd" "Geom_Dbu" nil 299)
    ("\\inc" "#include <>" backward-char 90)
    ("\\incl" "#include \"\"" backward-char 67)
    ("\\n" "NULL" nil 4)
    ("\\ofs" "ofstream (\"\");" (lambda nil (interactive) (search-backward "(")) 2)
    ("\\p" ".push_back();" (lambda nil (interactive) (search-backward ")")) 0)
    ("\\pb" ".push_back();" (lambda nil (interactive) (search-backward ")")) 95)
    ("\\rs" ".resize()" backward-char 77)
    ("\\si" ".size()" nil 233)
    ("\\spr" "sprintf(, \"%d\", );" (lambda nil (interactive) (beginning-of-line) (search-forward "\"")) 0)
    ("\\sr" "std::string" nil 1)
    ("\\st" "std::string" nil 1)
    ("\\std" "static_cast<double>" nil 13)
    ("\\sti" "static_cast<int>" nil 27)
    ("\\sz" "sizeof()" (lambda nil (interactive) (search-backward ")")) 2)
    ("\\ub" "Util_AssertBool(\"\");" (lambda nil (interactive) (search-backward "\"")) 0)
    ("\\ubf" "Util_AssertBool(false);" nil 167)
    ("\\ui" "unsigned int " nil 17)
    ("\\us" "Util_AssertCndString( ,  );" (lambda nil (interactive) (search-backward ",")) 4)
    ("\\uw" "Util_StopWatch watch;" nil 1)
    ("\\vd" "vector<double> " nil 118)
    ("\\vg" "vector<Geom_Dbu> " nil 9)
    ("\\vi" "vector<int> " nil 37)
    ("\\wp" "watch.Print();" nil 1)
    ("\\ws" "watch.Start();" nil 3)
    ("\\wst" "watch.Stop();" nil 1)
    ("\\x" "exit(0);" nil 7)
    ("\\xx" "exit(0);" nil 4)
    ("catch" "catch" c-electric-continued-statement 0)
    ("cerr" "cerr << \"\" << endl;" (lambda nil (interactive) (setq smart_forward_flag 1) (search-backward "\"") (c-indent-command)) 877)
    ("cin" "cin >> " nil 9)
    ("co2" "cout.precision(20);" nil 1)
    ("cout" "cout <<  << endl;" (lambda nil (interactive) (search-backward " <<") (c-indent-command)) 868)
    ("coute" "cout << endl;" nil 13)
    ("coutp" "cout.precision();" nil 4)
    ("couts" "cout << \"\" << endl;" (lambda nil (interactive) (setq smart_forward_flag 1) (search-backward "\"") (c-indent-command)) 1551)
    ("else" "else" c-electric-continued-statement 134)
    ("for" "" c++-for 1155)
    ("if" "" c++-if 1599)
    ("ints" "int*" nil 3)
    ("nii" "new int []" backward-char 4)
    ("paramter" "parameter" nil 3)
    ("teh" "the " nil 62)
    ("uns" "using namespace std;" nil 28)
    ("while" "while" c-electric-continued-statement 27)
    ("xxx" "exit(0);" nil 19)
    ))

(define-abbrev-table 'c-mode-abbrev-table '(
    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
    ))

(define-abbrev-table 'completion-list-mode-abbrev-table '(
    ))

(define-abbrev-table 'cperl-mode-abbrev-table '(
    (",." "\"\\n\"" nil 15)
    (";u" "undef $/;" nil 0)
    (";x" "exit(0);" nil 0)
    ("\\ag" "$ARGV[];" (lambda nil (interactive) (forward-char -2)) 3)
    ("\\ar" "$ARGV[]" (lambda nil (interactive) (forward-char -1)) 26)
    ("\\cf" "close(FILE);" cperl-indent-command 136)
    ("\\f" "<FILE>" nil 49)
    ("\\m" "=~ //" (lambda nil (interacive) (backward-char 1)) 0)
    ("\\of" "open (FILE, \":utf8\", \"\");" (lambda nil (interactive) (backward-char 3)) 57)
    ("\\ofr" "open(FILE, \"<\");" (lambda nil (interactive) (search-backward "\"")) 61)
    ("\\ofw" "open(FILE, \">\");" (lambda nil (interactive) (search-backward "\"")) 37)
    ("\\pf" "print FILE \"\\n\";" (lambda nil (interactive) (forward-char -4)) 68)
    ("\\sp" "split(\"\\n\", )" (lambda nil (interactive) (forward-char -1)) 26)
    ("\\spn" "split(\"\\n\", );" (lambda nil (interactive) (search-backward ")")) 1)
    ("\\sub" "sub  " (lambda nil (interactive) (perl-brace) (search-backward " {")) 0)
    ("\\ud" "undef $/; # undefines the separator. Can read one whole file in one scalar." nil 12)
    ("else" "" perl-else 154)
    ("for" "" perl-for 132)
    ("foreach" "" perl-foreach 210)
    ("if" "" perl-if 450)
    ("opf" "open (FILE, \":utf8\", \"\");" (lambda nil (interactive) (backward-char 3)) 1)
    ("print" "" perl-print 792)
    ("sg" "" subst-globally 367)
    ("ssg" "" tilde-subst-globally 42)
    ("xxx" "exit(0);" nil 172)
    ))

(define-abbrev-table 'doctex-mode-abbrev-table '(
    ))

(define-abbrev-table 'f90-mode-abbrev-table '(
    (";ab" "allocatable" nil 0)
    (";al" "allocate" nil 0)
    (";as" "assignment" nil 0)
    (";ba" "backspace" nil 0)
    (";bd" "block data" nil 0)
    (";c" "character" nil 0)
    (";cl" "close" nil 0)
    (";cm" "common" nil 0)
    (";cn" "contains" nil 0)
    (";cx" "complex" nil 0)
    (";cy" "cycle" nil 0)
    (";de" "deallocate" nil 0)
    (";df" "define" nil 0)
    (";di" "dimension" nil 0)
    (";dw" "do while" nil 0)
    (";el" "else" nil 0)
    (";eli" "else if" nil 0)
    (";elw" "elsewhere" nil 0)
    (";eq" "equivalence" nil 0)
    (";ex" "external" nil 0)
    (";ey" "entry" nil 0)
    (";fa" ".false." nil 0)
    (";fl" "forall" nil 0)
    (";fo" "format" nil 0)
    (";fu" "function" nil 0)
    (";i" "integer" nil 0)
    (";if" "interface" nil 0)
    (";im" "implicit none" nil 0)
    (";in " "include" nil 0)
    (";it" "intent" nil 0)
    (";lo" "logical" nil 0)
    (";mo" "module" nil 0)
    (";na" "namelist" nil 0)
    (";nu" "nullify" nil 0)
    (";op" "optional" nil 0)
    (";pa" "parameter" nil 0)
    (";pi" "private" nil 0)
    (";pm" "program" nil 0)
    (";po" "pointer" nil 0)
    (";pr" "print" nil 0)
    (";pu" "public" nil 0)
    (";r" "real" nil 0)
    (";rc" "recursive" nil 0)
    (";rt" "return" nil 0)
    (";rw" "rewind" nil 0)
    (";se" "select" nil 0)
    (";sq" "sequence" nil 0)
    (";su" "subroutine" nil 0)
    (";t" "type" nil 0)
    (";ta" "target" nil 0)
    (";tr" ".true." nil 0)
    (";wh" "where" nil 0)
    (";wr" "write" nil 0)
    ("`ab" "allocatable" nil 0)
    ("`al" "allocate" nil 0)
    ("`as" "assignment" nil 0)
    ("`ba" "backspace" nil 0)
    ("`bd" "block data" nil 0)
    ("`c" "character" nil 0)
    ("`cl" "close" nil 0)
    ("`cm" "common" nil 0)
    ("`cn" "contains" nil 0)
    ("`cx" "complex" nil 0)
    ("`cy" "cycle" nil 0)
    ("`de" "deallocate" nil 0)
    ("`df" "define" nil 0)
    ("`di" "dimension" nil 0)
    ("`dw" "do while" nil 0)
    ("`el" "else" nil 0)
    ("`eli" "else if" nil 0)
    ("`elw" "elsewhere" nil 0)
    ("`eq" "equivalence" nil 0)
    ("`ex" "external" nil 0)
    ("`ey" "entry" nil 0)
    ("`fa" ".false." nil 0)
    ("`fl" "forall" nil 0)
    ("`fo" "format" nil 0)
    ("`fu" "function" nil 0)
    ("`i" "integer" nil 0)
    ("`if" "interface" nil 0)
    ("`im" "implicit none" nil 0)
    ("`in " "include" nil 0)
    ("`it" "intent" nil 0)
    ("`lo" "logical" nil 0)
    ("`mo" "module" nil 0)
    ("`na" "namelist" nil 0)
    ("`nu" "nullify" nil 0)
    ("`op" "optional" nil 0)
    ("`pa" "parameter" nil 0)
    ("`pi" "private" nil 0)
    ("`pm" "program" nil 0)
    ("`po" "pointer" nil 0)
    ("`pr" "print" nil 0)
    ("`pu" "public" nil 0)
    ("`r" "real" nil 0)
    ("`rc" "recursive" nil 0)
    ("`rt" "return" nil 0)
    ("`rw" "rewind" nil 0)
    ("`se" "select" nil 0)
    ("`sq" "sequence" nil 0)
    ("`su" "subroutine" nil 0)
    ("`t" "type" nil 0)
    ("`ta" "target" nil 0)
    ("`tr" ".true." nil 0)
    ("`wh" "where" nil 0)
    ("`wr" "write" nil 0)
    ("print" "print *, \"\"" (lambda nil (interactive) (search-backward "\"")) 82)
    ("write" "write (*, *) " nil 3)
    ))

(define-abbrev-table 'fortran-mode-abbrev-table '(
    ("print" "print *, ''" nil 5)
    ))

(define-abbrev-table 'fundamental-mode-abbrev-table '(
    ("\\trk" "set shared::job::dbgTrackKaroList                      {0} ;# UD" nil 0)
    ))

(define-abbrev-table 'global-abbrev-table '(
    ))

(define-abbrev-table 'gnus-article-edit-mode-abbrev-table '(
    ))

(define-abbrev-table 'help-mode-abbrev-table '(
    ))

(define-abbrev-table 'hm--html-mode-abbrev-table '(
    (",," "<br>" nil 2)
    (".." "&nbsp;" nil 7)
    ("\\bct" "<center>" nil 1)
    ("\\ct" "<center></center>" (lambda nil (interactive) (search-backward "</")) 7)
    ("\\ect" "</center>" nil 5)
    ("\\hr" "<hr />" nil 2)
    ("\\prob" "<p /> <b>Problem .</b>" nil 2)
    ("\\s" "&nbsp;" nil 1)
    ("bb" "<br />" nil 23)
    ("hh" "<hr />" nil 9)
    ("htat" "that " nil 2)
    ("incl" "<!--#include virtual=\"\"-->" nil 1)
    ("pp" "<p /> " nil 33)
    ("taht" "that " nil 7)
    ("teh" "the " nil 2)
    ("wiht" "with " nil 1)
    ))

(define-abbrev-table 'html-mode-abbrev-table '(
    (",," "<br>" nil 2)
    (".." "&nbsp;" nil 1)
    ("\\bct" "<center>" nil 1)
    ("\\ct" "<center></center>" (lambda nil (interactive) (search-backward "</")) 7)
    ("\\ect" "</center>" nil 5)
    ("\\hr" "<hr />" nil 2)
    ("\\s" "&nbsp;" nil 1)
    ("bb" "<br />" nil 19)
    ("hh" "<hr />" nil 7)
    ("htat" "that " nil 2)
    ("hte" "the " nil 9)
    ("pp" "<p /> " nil 17)
    ("taht" "that " nil 7)
    ("teh" "the " nil 28)
    ("wiht" "with " nil 1)
    ))

(define-abbrev-table 'idl-mode-abbrev-table '(
    ))

(define-abbrev-table 'java-mode-abbrev-table '(
    ("catch" "catch" c-electric-continued-statement 0)
    ("else" "else" c-electric-continued-statement 0)
    ("finally" "finally" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
    ))

(define-abbrev-table 'javascript-mode-abbrev-table '(
    ))

(define-abbrev-table 'lisp-mode-abbrev-table '(
    ("\\ab" "(\"\" \"\"  0)" (lambda nil (interactive) (beginning-of-line) (search-forward "\"")) 0)
    ("\\li" "(lambda () (interacive) )" backward-char 1)
    ("dd" "" lisp-function 23)
    ("gg" "" global-set-abb 11)
    ("lc" "" local-set-abb 17)
    ))

(define-abbrev-table 'makefile-mode-abbrev-table '(
    ))

(define-abbrev-table 'matlab-mode-abbrev-table '(
    (";d" "dlmread" nil 0)
    (";dl" "dlmread" nil 0)
    (";p" "plot(" nil 0)
    ("\\ch" "clf; hold on; axis equal; axis off;" nil 0)
    ("\\dis" "disp(sprintf('%0.8g', ))" nil 6)
    ("\\disp" "disp(sprintf('%d', ));" nil 1)
    ("\\fig" "figure()" backward-char 11)
    ("\\sa" "save ('file', 'var', '-ascii', '-double');" nil 0)
    ("\\zz" "\\xxxx" nil 0)
    ("aeo" "axis equal; axis off;" nil 1)
    ("cha" "clf; hold on; axis equal; axis off;" nil 5)
    ("chaa" "clf; hold on; axis equal; axis off" nil 10)
    ("cho" "clf; hold on;" nil 1)
    ("dlr" "dlmread('');" nil 1)
    ("dsi" "display(sprintf('%d'))" nil 1)
    ("dsp" "disp(sprintf('%'));" (lambda nil (indent-according-to-mode) (search-backward "%")) 246)
    ("dsr" "display(sprintf('%0.9g'))" nil 1)
    ("fch" "figure(); clf; hold on;" (lambda nil (interactive) (search-backward ")")) 22)
    ("for" "" matlab-for 343)
    ("if" "" matlab-if 285)
    ("sag" "saveas(gcf, '')" nil 2)
    ("sgf" "saveas(gcf, '')" nil 24)
    ("teh" "the " nil 18)
    ("xxx" "break;" nil 3)
    ))

(define-abbrev-table 'matlab-shell-help-mode-abbrev-table '(
    ))

(define-abbrev-table 'matlab-shell-topic-mode-abbrev-table '(
    ))

(define-abbrev-table 'message-mode-abbrev-table '(
    ))

(define-abbrev-table 'mh-folder-mode-abbrev-table '(
    ))

(define-abbrev-table 'mh-letter-mode-abbrev-table '(
    ))

(define-abbrev-table 'mh-show-mode-abbrev-table '(
    ))

(define-abbrev-table 'mutt-mode-abbrev-table '(
    ("continous" "continuous " nil 0)
    ("existance" "existence" nil 2)
    ("hte" "the " nil 7)
    ("htis" "this " nil 0)
    ("riguros" "rigoros" nil 0)
    ("taht" "that " nil 14)
    ("wiht" "with " nil 0)
    ))

(define-abbrev-table 'objc-mode-abbrev-table '(
    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
    ))

(define-abbrev-table 'pascal-mode-abbrev-table '(
    ))

(define-abbrev-table 'php-mode-abbrev-table '(
    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
    ))

(define-abbrev-table 'pike-mode-abbrev-table '(
    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
    ))

(define-abbrev-table 'python-mode-abbrev-table '(
    ("print" "print \"\"" (lambda nil (interactive) (search-backward "\"")) 55)
    ))

(define-abbrev-table 'rpm-spec-mode-abbrev-table '(
    ))

(define-abbrev-table 'sgml-mode-abbrev-table '(
    ))

(define-abbrev-table 'sh-mode-abbrev-table '(
    ))

(define-abbrev-table 'shell-mode-abbrev-table '(
    ))

(define-abbrev-table 'tcl-mode-abbrev-table '(
    ("\\trk" "set shared::job::dbgTrackKaroList                      {0} ;# UD" nil 1)
    ))

(define-abbrev-table 'temp-buffer-mode-abbrev-table '(
    ))

(define-abbrev-table 'text-mode-abbrev-table '(
    ("\\a" "\\alpha" nil 126)
    ("\\ab" "(\"\" \"\"  0)" (lambda nil (interactive) (beginning-of-line) (search-forward "\"")) 9)
    ("\\abb" "(\"\" \"\" (lambda () (interactive)) 0)" (lambda nil (interactive) (beginning-of-line) (search-forward "\"")) 9)
    ("\\ans" "\\medskip\\noindent{\\bf Answer.} " nil 6)
    ("\\b" "\\beta" nil 19)
    ("\\ba" "\\begin{array}{}" backward-char 16)
    ("\\bab" "\\begin{abstract}" nil 3)
    ("\\baf" "Burden and Faires" nil 10)
    ("\\bal" "\\begin{align}" nil 3)
    ("\\bb" "{\\bf }" backward-char 151)
    ("\\bc" "\\begin{center}" nil 29)
    ("\\bca" "\\begin{cases}" nil 3)
    ("\\bco" "\\begin{corollary}" nil 1)
    ("\\bct" "\\begin{center}" nil 5)
    ("\\bd" "\\begin{definition}" nil 3)
    ("\\bdo" "\\begin{document}" nil 6)
    ("\\be" "\\begin{equation}\\label{}" backward-char 90)
    ("\\bea" "\\begin{eqnarray}" nil 1)
    ("\\ben" "\\begin{enumerate}" nil 3)
    ("\\beq" "\\begin{eqnarray}" nil 4)
    ("\\bes" "\\begin{equation*}" nil 6)
    ("\\bfg" "\\begin{figure}[h]\\label{}" backward-char 6)
    ("\\bfi" "\\begin{figure}" nil 0)
    ("\\bfl" "\\begin{flushleft}" nil 2)
    ("\\bfr" "\\begin{flushright}" nil 1)
    ("\\bg" "" latex-bigg 11)
    ("\\bh" "\\begin{huge}" nil 1)
    ("\\bi" "\\begin{itemize}" nil 9)
    ("\\bib" "\\bibitem{}" backward-char 6)
    ("\\bl" "\\begin{list}{}" backward-char 3)
    ("\\blm" "\\begin{lemma}" nil 2)
    ("\\bls" "\\begin{list}{}{}" (lambda nil (interactive) (backward-char 3)) 11)
    ("\\bm" "\\begin{multline*}" nil 5)
    ("\\bml" "\\begin{multline}" nil 3)
    ("\\bp" "" latex-bigg-par 7)
    ("\\bpm" "\\begin{pmatrix}" nil 1)
    ("\\br" "\\begin{reference}" nil 1)
    ("\\bs" "\\begin{subequations}" nil 13)
    ("\\bse" "\\begin{subequations}" nil 3)
    ("\\bsl" "\\begin{slide}" nil 1)
    ("\\bsp" "\\begin{split}" nil 12)
    ("\\bt" "\\begin{tabular}" nil 1)
    ("\\bth" "\\begin{theorem}" nil 2)
    ("\\bv" "\\begin{verbatim}" nil 14)
    ("\\bvt" "\\begin{verbatim}" nil 4)
    ("\\c" "\\mathbb C" nil 23)
    ("\\ci" "" latex-cite 97)
    ("\\cim" "\\cimmps" nil 95)
    ("\\cor" "" latex-corollary 11)
    ("\\cs" "" latex-cases 39)
    ("\\ct" "" latex-center 28)
    ("\\d" "\\delta" nil 18)
    ("\\dd" "\\Delta" nil 1)
    ("\\di" "\\displaystyle" nil 3)
    ("\\dist" "\\mbox{dist}" nil 3)
    ("\\ds" "\\displaystyle" nil 2)
    ("\\dt" "\\Delta t" nil 2)
    ("\\dx" "\\Delta x" nil 1)
    ("\\dy" "\\Delta y" nil 1)
    ("\\e" "\\epsilon" nil 7)
    ("\\ea" "\\end{array}" nil 15)
    ("\\eaa" "\\end{eqnarray}" nil 0)
    ("\\eab" "\\end{abstract}" nil 2)
    ("\\eal" "\\end{align}" nil 3)
    ("\\ec" "\\end{center}" nil 29)
    ("\\eca" "\\end{cases}" nil 3)
    ("\\eco" "\\end{corollary}" nil 1)
    ("\\ect" "\\end{center}" nil 7)
    ("\\ed" "\\end{definition}" nil 1)
    ("\\edo" "\\end{document}" nil 3)
    ("\\ee" "\\end{equation}" nil 70)
    ("\\eea" "\\end{eqnarray}" nil 1)
    ("\\een" "\\end{enumerate}" nil 1)
    ("\\eeq" "\\end{eqnarray}" nil 5)
    ("\\ees" "\\end{equation*}" nil 9)
    ("\\ef" "\\end{figure}" nil 1)
    ("\\efg" "\\end{figure}" nil 7)
    ("\\efl" "\\end{flushleft}" nil 2)
    ("\\efr" "\\end{flushright}" nil 1)
    ("\\eh" "\\end{huge}" nil 1)
    ("\\ei" "\\end{itemize}" nil 7)
    ("\\el" "\\end{list}" nil 3)
    ("\\elm" "\\end{lemma}" nil 3)
    ("\\els" "\\end{list}" nil 9)
    ("\\em" "\\end{multline*}" nil 8)
    ("\\eml" "\\end{multline}" nil 3)
    ("\\emp" "\\emph{}" backward-char 68)
    ("\\en" "" latex-enumerate 11)
    ("\\ep" "\\end{proof}" nil 3)
    ("\\epm" "\\end{pmatrix}" nil 7)
    ("\\eq" "" latex-equation 78)
    ("\\eqs" "" (lambda nil (interactive) (insert "\\begin{equation*}  \\end{equation*}") (previous-line 1)) 1)
    ("\\es" "\\end{subequations}" nil 5)
    ("\\ese" "\\end{subequations}" nil 4)
    ("\\esl" "\\end{slide}" nil 2)
    ("\\esp" "\\end{split}" nil 13)
    ("\\et" "\\end{tabular}" nil 3)
    ("\\eth" "\\end{theorem}" nil 1)
    ("\\ev" "\\end{verbatim}" nil 13)
    ("\\evt" "\\end{verbatim}" nil 4)
    ("\\fh" "\\foilhead{}" backward-char 7)
    ("\\fl" "\\foilhead{}" (lambda nil (interactive) (backward-char 1)) 8)
    ("\\fr" "" latex-frac 337)
    ("\\fra" "" latex-frame 24)
    ("\\ft" "\\footnote{}" backward-char 1)
    ("\\g" "\\gamma" nil 26)
    ("\\grad" "\\nabla" nil 17)
    ("\\h1" "H^{(1)}_m" nil 6)
    ("\\h2" "H^{(2)}_m" nil 4)
    ("\\hi" "\\phi" nil 155)
    ("\\hl" "\\\\ \\hline " newline 19)
    ("\\i" "\\infty" nil 127)
    ("\\ii" "" latex-int 19)
    ("\\il" "" latex-int-lim 83)
    ("\\im" "\\mathfrak{Im}" nil 4)
    ("\\inc" "\\includegraphics[width=0.8\\textwidth]{}" backward-char 3)
    ("\\incl" "\\includegraphics[clip, width=0.8\\textwidth]{}" backward-char 18)
    ("\\itm" "" latex-itemize 10)
    ("\\k" "\\kappa" nil 0)
    ("\\ker" "\\mbox{Ker}\\," nil 0)
    ("\\l" "\\lambda" nil 314)
    ("\\l2" " L^2(0,\\infty)" nil 1)
    ("\\lab" "\\label{}" backward-char 19)
    ("\\li" "Lipschitz" nil 6)
    ("\\ll" "\\lim\\limits_{}" backward-char 22)
    ("\\lm" "" latex-lemma 15)
    ("\\lr" "\\left(\\right)" (lambda nil (interactive) (search-backward "\\")) 9)
    ("\\lrp" "\\left(\\right)" (lambda nil (interactive) (search-backward "\\")) 2)
    ("\\ls" "" latex-list 18)
    ("\\lt" "{\\LaTeX} " nil 1)
    ("\\mat" "" latex-matrix 49)
    ("\\mb" "\\mbox{  }" (lambda nil (interactive) (backward-char 2)) 115)
    ("\\mbf" "\\mathbf{}" backward-char 6)
    ("\\mc" "\\mathcal{}" backward-char 2)
    ("\\md" "\\medskip" nil 40)
    ("\\mf" "{\\mathbf }" backward-char 26)
    ("\\mi" "\\medskip\\noindent" nil 1)
    ("\\mn" "\\medskip\\noindent " nil 107)
    ("\\n" "\\noindent" nil 9)
    ("\\na" "\\nabla" nil 4)
    ("\\ne" "\\not=" nil 10)
    ("\\ni" "\\noindent " nil 47)
    ("\\npi" "\\newpage\\item " nil 9)
    ("\\ny" "\\nyice" nil 96)
    ("\\o" "\\omega" nil 32)
    ("\\om" "\\Omega" nil 21)
    ("\\p" "\\partial " nil 88)
    ("\\p2" "\\frac{\\pi}{2}" nil 12)
    ("\\pa" "\\paragraph" nil 1)
    ("\\pp" "\\Phi" nil 4)
    ("\\pr" "" latex-proof 16)
    ("\\prob" "\\medskip\\noindent{\\bf Problem .}" (lambda nil (interactive) (backward-char 2)) 18)
    ("\\prr" "\\medskip\\noindent{\\bf Proof.} " nil 1)
    ("\\pt" "\\partial" nil 6)
    ("\\q" "\\mathbb Q" nil 2)
    ("\\r" "\\mathbb R" nil 82)
    ("\\r2" "\\mathbb R^2" nil 2)
    ("\\r3" "\\mathbb R^3" nil 0)
    ("\\re" "\\mathfrak{Re}" nil 7)
    ("\\rem" "\\medskip\\noindent{\\bf Remark.} " nil 1)
    ("\\rf" "" latex-ref 422)
    ("\\rn" "\\mathbb R^n" nil 3)
    ("\\ro" "\\rho" nil 5)
    ("\\rr" "\\ref{}" backward-char 73)
    ("\\s" "\\sigma" nil 2)
    ("\\sec" "\\section{}" backward-char 14)
    ("\\sl" "" latex-sum-lim 23)
    ("\\sli" "" latex-frame 25)
    ("\\sm" "\\smallskip" nil 3)
    ("\\sol" "\\medskip\\noindent{\\bf Solution.} " nil 37)
    ("\\sp" "" (lambda nil (interactive) (insert "\\begin{split}  \\end{split}") (previous-line 1)) 11)
    ("\\sq" "\\sqrt{}" backward-char 113)
    ("\\ss" "\\subsection{}" backward-char 4)
    ("\\sss" "\\subsubsection{}" backward-char 4)
    ("\\st" "\\stackrel{\\to}{}" backward-char 32)
    ("\\sub" "\\subset " nil 15)
    ("\\t" "\\theta" nil 58)
    ("\\tc" "\\textcolor{}{}" (lambda nil (interactive) (backward-char 3)) 15)
    ("\\th" "" latex-theorem 11)
    ("\\tit" "\\begin{center}\\bf \\end{center}" (lambda nil (interactive) (beginning-of-line) (search-forward "bf ")) 2)
    ("\\toi" "\\to\\infty" nil 1)
    ("\\trans" "^\\mathsf{T}" nil 3)
    ("\\transp" "^\\mathsf{T}" nil 0)
    ("\\transpose" "^\\mathsf{T}" nil 0)
    ("\\tt" "\\tt " nil 31)
    ("\\up" "\\usepackage{}" backward-char 6)
    ("\\ve" "\\varepsilon" nil 138)
    ("\\vec" "" latex-vector 35)
    ("\\vp" "\\varphi" nil 35)
    ("\\vt" "\\vartheta" nil 16)
    ("\\w" "\\wedge " nil 40)
    ("\\wt" "\\widetilde " nil 4)
    ("\\z" "\\mathbb Z" nil 19)
    ("ack" "acknowledgments" nil 0)
    ("analytical" "analytic " nil 3)
    ("approx" "approx " nil 13)
    ("behaviour" "behavior " nil 15)
    ("belive" "believe" nil 8)
    ("cin" "cinnps" nil 95)
    ("coeff" "coefficient " nil 1)
    ("coeffs" "coefficients " nil 1)
    ("continous" "continuous " nil 2)
    ("contr" "contradiction" nil 0)
    ("cyl" "cylindrical" nil 0)
    ("defence" "defense " nil 3)
    ("disp" "displaystyle" nil 14)
    ("enviroment" "environment" nil 0)
    ("funs" "functions " nil 0)
    ("homogenous" "homogeneous " nil 1)
    ("htat" "that " nil 5)
    ("hte" "the " nil 28)
    ("htis" "this " nil 3)
    ("hwat" "what " nil 1)
    ("ily" "I love you!" nil 4)
    ("indep" "independent " nil 0)
    ("lhs" "left-hand side " nil 0)
    ("lin" "linearly " nil 0)
    ("neib" "neighborhood " nil 14)
    ("oth" "on the other hand" nil 1)
    ("oyu" "you " nil 3)
    ("param" "parametrization " nil 0)
    ("parameterization" "parametrization " nil 1)
    ("polyn" "polynomial " nil 1)
    ("prop" "property " nil 0)
    ("props" "properties " nil 0)
    ("responce" "response " nil 1)
    ("rhs" "right-hand side " nil 0)
    ("rigoros" "rigorous " nil 0)
    ("riguros" "rigoros" nil 1)
    ("taht" "that " nil 53)
    ("teh" "the " nil 184)
    ("thm" "theorem " nil 2)
    ("weired" "weird " nil 1)
    ("wiht" "with " nil 3)
    ))

(define-abbrev-table 'winmgr-mode-abbrev-table '(
    ))

(define-abbrev-table 'xml-mode-abbrev-table '(
    ))

(define-abbrev-table 'xrdb-mode-abbrev-table '(
    ))

(define-abbrev-table 'xsl-mode-abbrev-table '(
    ("a" "azimuth=\"\"" backward-char 0)
    ("aa" "alignment-adjust=\"\"" backward-char 0)
    ("ab" "alignment-baseline=\"\"" backward-char 0)
    ("ap" "absolute-position=\"\"" backward-char 0)
    ("ar" "auto-restore=\"\"" backward-char 0)
    ("as" "active-state=\"\"" backward-char 0)
    ("b" "bottom=\"\"" backward-char 0)
    ("ba" "break-after=\"\"" backward-char 0)
    ("bac" "border-after-color=\"\"" backward-char 0)
    ("bap" "border-after-precedence=\"\"" backward-char 0)
    ("bas" "border-after-style=\"\"" backward-char 0)
    ("baw" "border-after-width=\"\"" backward-char 0)
    ("bawc" "border-after-width.conditionality=\"\"" backward-char 0)
    ("bawl" "border-after-width.length=\"\"" backward-char 0)
    ("bb" "break-before=\"\"" backward-char 0)
    ("bbc" "border-bottom-color=\"\"" backward-char 0)
    ("bbp" "border-before-precedence=\"\"" backward-char 0)
    ("bbs" "border-bottom-style=\"\"" backward-char 0)
    ("bbw" "border-bottom-width=\"\"" backward-char 0)
    ("bbwc" "border-bottom-width.conditionality=\"\"" backward-char 0)
    ("bbwl" "border-bottom-width.length=\"\"" backward-char 0)
    ("bc" "border-color=\"\"" backward-char 0)
    ("bec" "border-end-color=\"\"" backward-char 0)
    ("bep" "border-end-precedence=\"\"" backward-char 0)
    ("bes" "border-end-style=\"\"" backward-char 0)
    ("bew" "border-end-width=\"\"" backward-char 0)
    ("bewc" "border-end-width.conditionality=\"\"" backward-char 0)
    ("bewl" "border-end-width.length=\"\"" backward-char 0)
    ("bi" "background-image=\"\"" backward-char 0)
    ("bl" "border-left=\"\"" backward-char 0)
    ("blc" "border-left-color=\"\"" backward-char 0)
    ("bls" "border-left-style=\"\"" backward-char 0)
    ("blw" "border-left-width=\"\"" backward-char 0)
    ("blwc" "border-left-width.conditionality=\"\"" backward-char 0)
    ("blwl" "border-left-width.length=\"\"" backward-char 0)
    ("bon" "blank-or-not-blank=\"\"" backward-char 0)
    ("bp" "background-position=\"\"" backward-char 0)
    ("bpd" "block-progression-dimension=\"\"" backward-char 0)
    ("bpdmax" "block-progression-dimension.maximum=\"\"" backward-char 0)
    ("bpdmin" "block-progression-dimension.minimum=\"\"" backward-char 0)
    ("bpdopt" "block-progression-dimension.optimum=\"\"" backward-char 0)
    ("bph" "background-position-horizontal=\"\"" backward-char 0)
    ("bpv" "background-position-vertical=\"\"" backward-char 0)
    ("br" "border-right=\"\"" backward-char 0)
    ("brc" "border-right-color=\"\"" backward-char 0)
    ("brs" "border-right-style=\"\"" backward-char 0)
    ("brw" "border-right-width=\"\"" backward-char 0)
    ("brwc" "border-right-width.conditionality=\"\"" backward-char 0)
    ("brwl" "border-right-width.length=\"\"" backward-char 0)
    ("bs" "border-style=\"\"" backward-char 0)
    ("bsbpd" "border-separation.block-progression-direction=\"\"" backward-char 0)
    ("bsc" "border-start-color=\"\"" backward-char 0)
    ("bsipd" "border-separation.inline-progression-direction=\"\"" backward-char 0)
    ("bsp" "border-start-precedence=\"\"" backward-char 0)
    ("bss" "border-start-style=\"\"" backward-char 0)
    ("bsw" "border-start-width=\"\"" backward-char 0)
    ("bswc" "border-start-width.conditionality=\"\"" backward-char 0)
    ("bswl" "border-start-width.length=\"\"" backward-char 0)
    ("bt" "border-top=\"\"" backward-char 0)
    ("btc" "border-top-color=\"\"" backward-char 0)
    ("bts" "border-top-style=\"\"" backward-char 0)
    ("btw" "border-top-width=\"\"" backward-char 0)
    ("btwc" "border-top-width.conditionality=\"\"" backward-char 0)
    ("btwl" "border-top-width.length=\"\"" backward-char 0)
    ("bw" "border-width=\"\"" backward-char 0)
    ("c" "cue=\"\"" backward-char 0)
    ("ca" "cue-after=\"\"" backward-char 0)
    ("cb" "cue-before=\"\"" backward-char 0)
    ("cc" "column-count=\"\"" backward-char 0)
    ("cds" "cdata-section-elements=\"\"" backward-char 0)
    ("cg" "column-gap=\"\"" backward-char 0)
    ("ch" "content-height=\"\"" backward-char 0)
    ("cl" "clear=\"\"" backward-char 0)
    ("cli" "clip=\"\"" backward-char 0)
    ("cn" "column-number=\"\"" backward-char 0)
    ("cnt" "count=\"\"" backward-char 0)
    ("cpn" "color-profile-name=\"\"" backward-char 0)
    ("cs" "caption-side=\"\"" backward-char 0)
    ("ct" "content-type=\"\"" backward-char 0)
    ("cw" "content-width=\"\"" backward-char 0)
    ("d" "direction=\"\"" backward-char 0)
    ("da" "display-align=\"\"" backward-char 0)
    ("db" "dominant-baseline=\"\"" backward-char 0)
    ("dig" "digit=\"\"" backward-char 0)
    ("doe" "disable-output-escaping=\"\"" backward-char 0)
    ("dpo" "destination-placement-offset=\"\"" backward-char 0)
    ("ds" "decimal-separator=\"\"" backward-char 0)
    ("dt" "data-type=\"\"" backward-char 0)
    ("dtp" "doctype-public=\"\"" backward-char 0)
    ("dts" "doctype-system=\"\"" backward-char 0)
    ("e" "extent=\"\"" backward-char 0)
    ("ec" "empty-cells=\"\"" backward-char 0)
    ("ed" "external-destination=\"\"" backward-char 0)
    ("eep" "extension-element-prefixes=\"\"" backward-char 0)
    ("ei" "end-indent=\"\"" backward-char 0)
    ("ele" "elements=\"\"" backward-char 0)
    ("enc" "encoding=\"\"" backward-char 0)
    ("er" "ends-row=\"\"" backward-char 0)
    ("erp" "exclude-result-prefixes=\"\"" backward-char 0)
    ("f" "format=\"\"" backward-char 0)
    ("fb" "fo:block" nil 0)
    ("fbc" "fo:block-container" nil 0)
    ("fbl" "fo:basic-link" nil 0)
    ("fbo" "fo:bidi-override" nil 0)
    ("fc" "fo:character" nil 0)
    ("fcp" "fo:color-profile" nil 0)
    ("fcpmr" "fo:conditional-page-master-reference" nil 0)
    ("fd" "fo:declarations" nil 0)
    ("feg" "fo:external-graphic" nil 0)
    ("ff" "font-family=\"\"" backward-char 0)
    ("ffb" "fo:footnote-body" nil 0)
    ("fi" "fo:inline" nil 0)
    ("fic" "fo:inline-container" nil 0)
    ("fifo" "fo:instream-foreign-object" nil 0)
    ("fips" "fo:initial-property-set" nil 0)
    ("fl" "fo:leader" nil 0)
    ("flb" "fo:list-block" nil 0)
    ("fli" "fo:list-item" nil 0)
    ("flib" "fo:list-item-body" nil 0)
    ("flil" "fo:list-item-label" nil 0)
    ("flms" "fo:layout-master-set" nil 0)
    ("fm" "fo:marker" nil 0)
    ("fmc" "fo:multi-case" nil 0)
    ("fmp" "fo:multi-properties" nil 0)
    ("fmps" "fo:multi-property-set" nil 0)
    ("fms" "fo:multi-switch" nil 0)
    ("fmt" "format=\"\"" backward-char 0)
    ("fn" "flow-name=\"\"" backward-char 0)
    ("fpc" "force-page-count=\"\"" backward-char 0)
    ("fpn" "fo:page-number" nil 0)
    ("fpnc" "fo:page-number-citation" nil 0)
    ("fps" "fo:page-sequence" nil 0)
    ("fpsm" "fo:page-sequence-master" nil 0)
    ("fr" "from=\"\"" backward-char 0)
    ("fra" "fo:region-after" nil 0)
    ("frb" "fo:region-body" nil 0)
    ("fre" "fo:region-end" nil 0)
    ("frm" "fo:retrieve-marker" nil 0)
    ("frpma" "fo:repeatable-page-master-alternatives" nil 0)
    ("frpmr" "fo:repeatable-page-master-reference" nil 0)
    ("frs" "fo:region-start" nil 0)
    ("fs" "font-style=\"\"" backward-char 0)
    ("fsa" "font-size-adjust=\"\"" backward-char 0)
    ("fsc" "fo:static-content" nil 0)
    ("fspm" "fo:single-page-master-reference" nil 0)
    ("fss" "font-selection-strategy=\"\"" backward-char 0)
    ("ft" "fo:title" nil 0)
    ("ftac" "fo:table-and-caption" nil 0)
    ("ftb" "fo:table-body" nil 0)
    ("ftc" "fo:table-column" nil 0)
    ("ftf" "fo:table-footer" nil 0)
    ("fth" "fo:table-header" nil 0)
    ("ftr" "fo:table-row" nil 0)
    ("fv" "font-variant=\"\"" backward-char 0)
    ("fw" "font-weight=\"\"" backward-char 0)
    ("goh" "glyph-orientation-horizontal=\"\"" backward-char 0)
    ("gov" "glyph-orientation-vertical=\"\"" backward-char 0)
    ("gs" "grouping-size=\"\"" backward-char 0)
    ("gsep" "grouping-separator=\"\"" backward-char 0)
    ("gsiz" "grouping-size=\"\"" backward-char 0)
    ("h" "height=\"\"" backward-char 0)
    ("hc" "hyphenation-character=\"\"" backward-char 0)
    ("hk" "hyphenation-keep=\"\"" backward-char 0)
    ("hlc" "hyphenation-ladder-count=\"\"" backward-char 0)
    ("hpc" "hyphenation-push-character-count=\"\"" backward-char 0)
    ("hrcc" "hyphenation-remain-character-count=\"\"" backward-char 0)
    ("href" "href=\"\"" backward-char 0)
    ("hy" "hyphenate=\"\"" backward-char 0)
    ("i" "id=\"\"" backward-char 0)
    ("id" "intrusion-displace=\"\"" backward-char 0)
    ("ind" "indent=\"\"" backward-char 0)
    ("inf" "infinity=\"\"" backward-char 0)
    ("ipd" "inline-progression-dimension=\"\"" backward-char 0)
    ("ipdmax" "inline-progression-dimension.maximum=\"\"" backward-char 0)
    ("ipdmin" "inline-progression-dimension.minimum=\"\"" backward-char 0)
    ("ipdopt" "inline-progression-dimension.optimum=\"\"" backward-char 0)
    ("ipn" "initial-page-number=\"\"" backward-char 0)
    ("kt" "keep-together=\"\"" backward-char 0)
    ("ktc" "keep-together.within-column=\"\"" backward-char 0)
    ("ktl" "keep-together.within-line=\"\"" backward-char 0)
    ("ktp" "keep-together.within-page=\"\"" backward-char 0)
    ("kwn" "keep-with-next=\"\"" backward-char 0)
    ("kwnc" "keep-with-next.within-column=\"\"" backward-char 0)
    ("kwnl" "keep-with-next.within-line=\"\"" backward-char 0)
    ("kwnp" "keep-with-next.within-page=\"\"" backward-char 0)
    ("kwp" "keep-with-previous=\"\"" backward-char 0)
    ("kwpc" "keep-with-previous.within-column=\"\"" backward-char 0)
    ("kwpl" "keep-with-previous.within-line=\"\"" backward-char 0)
    ("kwpp" "keep-with-previous.within-page=\"\"" backward-char 0)
    ("l" "lang=\"\"" backward-char 0)
    ("la" "leader-alignment=\"\"" backward-char 0)
    ("le" "left=\"\"" backward-char 0)
    ("lh" "line-height=\"\"" backward-char 0)
    ("lhcond" "line-height.conditionality=\"\"" backward-char 0)
    ("lhmax" "line-height.maximum=\"\"" backward-char 0)
    ("lhmin" "line-height.minimum=\"\"" backward-char 0)
    ("lhopt" "line-height.optimum=\"\"" backward-char 0)
    ("lhprec" "line-height.precedence=\"\"" backward-char 0)
    ("lhs" "line-height-shift-adjustment=\"\"" backward-char 0)
    ("ll" "leader-length=\"\"" backward-char 0)
    ("lle" "last-line-end-indent=\"\"" backward-char 0)
    ("llmax" "leader-length.maximum=\"\"" backward-char 0)
    ("llmin" "leader-length.minimum=\"\"" backward-char 0)
    ("llopt" "leader-length.optimum=\"\"" backward-char 0)
    ("lp" "leader-pattern=\"\"" backward-char 0)
    ("lpw" "leader-pattern-width=\"\"" backward-char 0)
    ("ls" "letter-spacing=\"\"" backward-char 0)
    ("lss" "line-stacking-strategy=\"\"" backward-char 0)
    ("lt" "linefeed-treatment=\"\"" backward-char 0)
    ("lv" "letter-value=\"\"" backward-char 0)
    ("lvl" "level=\"\"" backward-char 0)
    ("m" "match=\"\"" backward-char 0)
    ("mb" "margin-bottom=\"\"" backward-char 0)
    ("mcn" "marker-class-name=\"\"" backward-char 0)
    ("meth" "method=\"\"" backward-char 0)
    ("mh" "min-height=\"\"" backward-char 0)
    ("ml" "margin-left=\"\"" backward-char 0)
    ("mn" "master-name=\"\"" backward-char 0)
    ("mo" "mode=\"\"" backward-char 0)
    ("mr" "maximum-repeats=\"\"" backward-char 0)
    ("ms" "minus-sign=\"\"" backward-char 0)
    ("mt" "media-type=\"\"" backward-char 0)
    ("mu" "media-usage=\"\"" backward-char 0)
    ("mw" "min-width=\"\"" backward-char 0)
    ("n" "name=\"\"" backward-char 0)
    ("nan" "NaN=\"\"" backward-char 0)
    ("ncr" "number-columns-repeated=\"\"" backward-char 0)
    ("ncs" "number-columns-spanned=\"\"" backward-char 0)
    ("ndpg" "n-digits-per-group=\"\"" backward-char 0)
    ("nrs" "number-rows-spanned=\"\"" backward-char 0)
    ("ns" "namespace=\"\"" backward-char 0)
    ("o" "order=\"\"" backward-char 0)
    ("ooe" "odd-or-even=\"\"" backward-char 0)
    ("or" "orphans=\"\"" backward-char 0)
    ("ov" "overflow=\"\"" backward-char 0)
    ("oxml" "omit-xml-declaration=\"\"" backward-char 0)
    ("p" "priority=\"\"" backward-char 0)
    ("pa" "pause-after=\"\"" backward-char 0)
    ("pacond" "padding-after.conditionality=\"\"" backward-char 0)
    ("pal" "padding-after.length=\"\"" backward-char 0)
    ("pb" "pause-before=\"\"" backward-char 0)
    ("pba" "page-break-after=\"\"" backward-char 0)
    ("pbb" "page-break-before=\"\"" backward-char 0)
    ("pbcond" "padding-before.conditionality=\"\"" backward-char 0)
    ("pbi" "page-break-inside=\"\"" backward-char 0)
    ("pbl" "padding-before.length=\"\"" backward-char 0)
    ("pbo" "padding-bottom=\"\"" backward-char 0)
    ("pbocond" "padding-bottom.conditionality=\"\"" backward-char 0)
    ("pbol" "padding-bottom.length=\"\"" backward-char 0)
    ("pd" "play-during=\"\"" backward-char 0)
    ("pdbs" "provisional-distance-between-starts=\"\"" backward-char 0)
    ("pe" "padding-end=\"\"" backward-char 0)
    ("pecond" "padding-end.conditionality=\"\"" backward-char 0)
    ("pel" "padding-end.length=\"\"" backward-char 0)
    ("perc" "percent=\"\"" backward-char 0)
    ("ph" "page-height=\"\"" backward-char 0)
    ("pl" "padding-left=\"\"" backward-char 0)
    ("plcond" "padding-left.conditionality=\"\"" backward-char 0)
    ("pll" "padding-left.length=\"\"" backward-char 0)
    ("pls" "provisional-label-separation=\"\"" backward-char 0)
    ("pm" "per-mille=\"\"" backward-char 0)
    ("pp" "page-position=\"\"" backward-char 0)
    ("pr" "pitch-range=\"\"" backward-char 0)
    ("prcond" "padding-right.conditionality=\"\"" backward-char 0)
    ("prl" "padding-right.length=\"\"" backward-char 0)
    ("ps" "pattern-separator=\"\"" backward-char 0)
    ("pscond" "padding-start.conditionality=\"\"" backward-char 0)
    ("psl" "padding-start.length=\"\"" backward-char 0)
    ("pt" "padding-top=\"\"" backward-char 0)
    ("pw" "page-width=\"\"" backward-char 0)
    ("ra" "relative-align=\"\"" backward-char 0)
    ("rb" "retrieve-boundary=\"\"" backward-char 0)
    ("rcn" "retrieve-class-name=\"\"" backward-char 0)
    ("ri" "rendering-intent=\"\"" backward-char 0)
    ("rich" "richness=\"\"" backward-char 0)
    ("rid" "ref-id=\"\"" backward-char 0)
    ("rig" "right=\"\"" backward-char 0)
    ("rn" "region-name=\"\"" backward-char 0)
    ("ro" "role=\"\"" backward-char 0)
    ("rp" "retrieve-position=\"\"" backward-char 0)
    ("rs" "rule-style=\"\"" backward-char 0)
    ("rt" "rule-thickness=\"\"" backward-char 0)
    ("s" "select=\"\"" backward-char 0)
    ("sa" "space-after=\"\"" backward-char 0)
    ("sacond" "space-after.conditionality=\"\"" backward-char 0)
    ("salb" "suppress-at-line-break=\"\"" backward-char 0)
    ("samax" "space-after.maximum=\"\"" backward-char 0)
    ("samin" "space-after.minimum=\"\"" backward-char 0)
    ("saopt" "space-after.optimum=\"\"" backward-char 0)
    ("saprec" "space-after.precedence=\"\"" backward-char 0)
    ("sb" "space-before=\"\"" backward-char 0)
    ("sbcond" "space-before.conditionality=\"\"" backward-char 0)
    ("sbmax" "space-before.maximum=\"\"" backward-char 0)
    ("sbmin" "space-before.minimum=\"\"" backward-char 0)
    ("sbopt" "space-before.optimum=\"\"" backward-char 0)
    ("sbprec" "space-before.precedence=\"\"" backward-char 0)
    ("sc" "scaling=\"\"" backward-char 0)
    ("scr" "script=\"\"" backward-char 0)
    ("sde" "show-destination=\"\"" backward-char 0)
    ("sdo" "source-document=\"\"" backward-char 0)
    ("se" "space-end=\"\"" backward-char 0)
    ("second" "space-end.conditionality=\"\"" backward-char 0)
    ("semax" "space-end.maximum=\"\"" backward-char 0)
    ("semin" "space-end.minimum=\"\"" backward-char 0)
    ("seopt" "space-end.optimum=\"\"" backward-char 0)
    ("seprec" "space-end.precedence=\"\"" backward-char 0)
    ("sh" "speak-header=\"\"" backward-char 0)
    ("si" "start-indent=\"\"" backward-char 0)
    ("sm" "scaling-method=\"\"" backward-char 0)
    ("sn" "speak-numeral=\"\"" backward-char 0)
    ("sp" "speak-punctuation=\"\"" backward-char 0)
    ("spe" "speak=\"\"" backward-char 0)
    ("spn" "span=\"\"" backward-char 0)
    ("spr" "stylesheet-prefix=\"\"" backward-char 0)
    ("sr" "starts-row=\"\"" backward-char 0)
    ("src" "src=\"\"" backward-char 0)
    ("ss" "starting-state=\"\"" backward-char 0)
    ("sscond" "space-start.conditionality=\"\"" backward-char 0)
    ("ssmax" "space-start.maximum=\"\"" backward-char 0)
    ("ssmin" "space-start.minimum=\"\"" backward-char 0)
    ("ssopt" "space-start.optimum=\"\"" backward-char 0)
    ("ssprec" "space-start.precedence=\"\"" backward-char 0)
    ("st" "switch-to=\"\"" backward-char 0)
    ("stand" "standalone=\"\"" backward-char 0)
    ("str" "stress=\"\"" backward-char 0)
    ("t" "test=\"\"" backward-char 0)
    ("ta" "text-altitude=\"\"" backward-char 0)
    ("tal" "text-align-last=\"\"" backward-char 0)
    ("taw" "treat-as-word-space=\"\"" backward-char 0)
    ("td" "text-depth=\"\"" backward-char 0)
    ("ter" "terminate=\"\"" backward-char 0)
    ("ti" "text-indent=\"\"" backward-char 0)
    ("tl" "table-layout=\"\"" backward-char 0)
    ("tofb" "table-omit-footer-at-break=\"\"" backward-char 0)
    ("tohb" "table-omit-header-at-break=\"\"" backward-char 0)
    ("top" "top=\"\"" backward-char 0)
    ("tpc" "target-processing-context=\"\"" backward-char 0)
    ("ts" "text-shadow=\"\"" backward-char 0)
    ("tt" "text-transform=\"\"" backward-char 0)
    ("ua" "use-attribute-sets=\"\"" backward-char 0)
    ("ub" "unicode-bidi=\"\"" backward-char 0)
    ("use" "use=\"\"" backward-char 0)
    ("v" "value=\"\"" backward-char 0)
    ("va" "vertical-align=\"\"" backward-char 0)
    ("ver" "version=\"\"" backward-char 0)
    ("vf" "voice-family=\"\"" backward-char 0)
    ("vi" "visibility=\"\"" backward-char 0)
    ("vo" "volume=\"\"" backward-char 0)
    ("w" "width=\"\"" backward-char 0)
    ("wdw" "widows=\"\"" backward-char 0)
    ("wm" "writing-mode=\"\"" backward-char 0)
    ("wo" "wrap-option=\"\"" backward-char 0)
    ("ws" "word-spacing=\"\"" backward-char 0)
    ("wsc" "white-space-collapse=\"\"" backward-char 0)
    ("wst" "white-space-treatment=\"\"" backward-char 0)
    ("xa" "xsl:attribute" nil 0)
    ("xai" "xsl:apply-imports" nil 0)
    ("xas" "xsl:attribute-set" nil 0)
    ("xat" "xsl:apply-templates" nil 0)
    ("xc" "xsl:choose" nil 0)
    ("xcm" "xsl:comment" nil 0)
    ("xco" "xsl:copy-of" nil 0)
    ("xcp" "xsl:copy" nil 0)
    ("xct" "xsl:call-template" nil 0)
    ("xdf" "xsl:decimal-format" nil 0)
    ("xe" "xsl:element" nil 0)
    ("xfb" "xsl:fallback" nil 0)
    ("xfe" "xsl:for-each" nil 0)
    ("xif" "xsl:if" nil 0)
    ("xim" "xsl:import" nil 0)
    ("xinc" "xsl:include" nil 0)
    ("xk" "xsl:key" nil 0)
    ("xl" "xml:lang=\"\"" backward-char 0)
    ("xme" "xsl:message" nil 0)
    ("xn" "xmlns=\"\"" backward-char 0)
    ("xna" "xsl:namespace-alias" nil 0)
    ("xnf" "xmlns:fo=\"\"" backward-char 0)
    ("xnx" "xmlns:xsl=\"\"" backward-char 0)
    ("xo" "xsl:otherwise" nil 0)
    ("xout" "xsl:output" nil 0)
    ("xpa" "xsl:param" nil 0)
    ("xpi" "xsl:processing-instruction" nil 0)
    ("xps" "xsl:preserve-space" nil 0)
    ("xs" "xsl:stylesheet" nil 0)
    ("xso" "xsl:sort" nil 0)
    ("xss" "xsl:strip-space" nil 0)
    ("xt" "xsl:template" nil 0)
    ("xtran" "xsl:transform" nil 0)
    ("xtxt" "xsl:text" nil 0)
    ("xva" "xsl:variable" nil 0)
    ("xvo" "xsl:value-of" nil 0)
    ("xw" "xsl:when" nil 0)
    ("xwp" "xsl:with-param" nil 0)
    ("zd" "zero-digit=\"\"" backward-char 0)
    ("zi" "z-index=\"\"" backward-char 0)
    ))

