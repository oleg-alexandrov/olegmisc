<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<!-- Created with XEmacs -->
<head>
  <title>
    Using XEmacs to edit LaTeX files
  </title>
  <link rel="stylesheet" href="styles.css" type="text/css" />
  <link href="xemacs.png" rel="icon" type="image/png"/>
  <meta name="Author" content="Oleg Alexandrov aoleg@math.umn.edu" />
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="description" content="XEmacs tips, XEmacs tutorial, Customizing XEmacs, 
    Xemacs customization, xemacs and latex, abbreviations" />
</head>
<body text="#000000" bgcolor="#ffffff">


<center><h1>Using XEmacs to edit LaTeX files</h1></center> 

The power of XEmacs becomes especially obvious when editing LaTeX files.
LaTeX is a wonderful typesetting system, but sometimes it can require too much
typing to do the job. Here I will explain how to make XEmacs do much of the typing for you, by using 
<i>abbreviations</i>. And when I say abbreviations, I don't mean creating a preamble in the LaTeX document
which will define short names for long commands. I mean one can actually teach XEmacs that whenever you type
for instance <font color="#0000ff">\rla</font> and hit the space key, then you actually mean
<font color="#0000ff">\rightleftarrow</font>, and have XEmacs replace the former with the latter.

<p> That enough would already be great. But XEmacs can do more. What
if one could type in <font color="#0000ff">\eq</font>, hit the space
key, and get as a result the equation environment, <pre><font color="#0000ff">\begin{equation}\label{}

\end{equation}</font></pre> and in addition the cursor would go right
where it is supposed to be, in between the curly braces of <font color="#0000ff">\label{}</font>?  That is possible. We will need to
write a small emacs lisp function to insert the above and then
move the cursor back as many positions as needed to place it where it
should be. Then we will make the <font color="#0000ff">\eq</font>
abbreviation call this function. Below I explain how to implement
all of this.


<p>First, let us create a file where we will store all LaTeX-related
preferences and functions for XEmacs. And then we need to tell XEmacs
to load that file every time we edit a LaTeX file. We can for instance
name that file <i>my-latex.el</i> and store it in the directory
<i><a href="startup">.xemacs</a></i>. Then, paste the following in
<i><a href="startup">init.el</a></i>

<p>
<table border="1" cellspacing="0" cellpadding="2"  bgcolor="#e0e0e0"  width="100%">
<tr><td>
<pre><font color="#ee7600">; associate the files with the .tex extension with the LaTeX mode</font>
(setq auto-mode-alist (append '((&quot;<font color="#00cd00">\\.tex$</font>&quot;  . LaTeX-mode)) auto-mode-alist))

<font color="#ee7600">; load the LaTeX mode</font>
(<font color="#f939ff">require</font> '<font color="#00cd00">tex-site</font>)

<font color="#ee7600">; Tell XEmacs to load `</font><font color="#00cd00">my-latex.el</font><font color="#ee7600">' when opening LaTeX files</font>
(add-hook 'LaTeX-mode-hook
  '(<font color="#f939ff">lambda</font>()
     (load-file &quot;<font color="#00cd00">~/.xemacs/my-latex.el</font>&quot;)  <font color="#ee7600">; load these LaTeX preferences</font>
     ))</pre>
</td></tr></table>

<p>Next, we will tell XEmacs to enable the <i>abbreviations</i> mode. 
The abbreviations themselves will be stored in a file called <i>my-abbreviations.el</i>
in the directory <i><a href="startup">.xemacs</a></i>. To do this, enter
the following in  <i><a href="startup">init.el</a></i>.

<p>
<table border="1" cellspacing="0" cellpadding="2"  bgcolor="#e0e0e0"  width="100%">
<tr><td>
<pre>(setq-default abbrev-mode t)                            <font color="#ee7600">; enable abbreviations</font>
(setq save-abbrevs t)                                   <font color="#ee7600">; save abbreviations upon exiting xemacs</font>
(setq abbrev-file-name &quot;<font color="#00cd00">~/.xemacs/my-abbreviations.el</font>&quot;) <font color="#ee7600">; the file storing the abbreviations</font>
(<font color="#f939ff">if</font> (file-readable-p abbrev-file-name)                  <font color="#ee7600">; read the abbreviations every</font>
  (read-abbrev-file abbrev-file-name)                   <font color="#ee7600">; time xemacs is started</font>
  )</pre>
</td></tr></table>

<p> Here is how the file <i>my-abbreviations.el</i> can look like:

<p><table border="1" cellspacing="0" cellpadding="0"  bgcolor="#e0e0e0"  width="100%">
<tr><td>
<pre><font color="#ee7600">; Define the table of abbreviations in latex-mode.  Note that we have
; to use '\\' to stand for backslash, since, just like in LaTeX, in
; emacs lisp the backslash character is special.  It would have been
; logical for this table to be called latex-mode-abbrev-table, but for
; some reason that does not work.</font>
(<font color="#f939ff">define-abbrev-table</font> '<font color="#0000ff">text-mode-abbrev-table</font> '(
  (&quot;<font color="#00cd00">\\a</font>&quot; &quot;<font color="#00cd00">\\alpha</font>&quot; nil 0)                  <font color="#ee7600">; define \a to be an abbreviation for \alpha    
</font>  (&quot;<font color="#00cd00">\\b</font>&quot; &quot;<font color="#00cd00">\\beta</font>&quot; nil 0)                   <font color="#ee7600">; and \b for \beta 
</font>  (&quot;<font color="#00cd00">\\lra</font>&quot; &quot;<font color="#00cd00">\\leftrightarrow</font>&quot; nil 0)       <font color="#ee7600">; and \rla for \leftrightarrow
</font>  <font color="#ee7600">; Other abbreviations go here. Note the closing parentheses below.
</font> )
)</pre>
</td></tr>
</table><p>


Let us look at the syntax employed in the abbreviation table. It is
clear that in every row of the table the first component defines the
abbreviation, and that the second component defines the abbreviation
expansion, that is, what we want the abbreviation replaced with. In
the third position there is a <i>nil</i>. Actually, there we can put
the name of an emacs lisp function, and then the abbreviation will
call that function. And this is where all the power of abbreviations
comes from. By calling a function it is possible to make much more
complicated operations than just the simple replacement of an
abbreviation with its expansion. That will be illustrated below.  So
far, the third component is <i>nil</i>, which does nothing. Finally
the fourth component is an integer number.  There XEmacs records how
many times an abbreviation has been used so far. That is to say, that
place keeps the <i>statistics</i> of abbreviations usage.

<p> Now let us see how to define an abbreviation which upon being expanded will call a function. Consider the following 
example. We want the abbreviation <font color="#0000ff">\ci</font> to get expanded into 
<font color="#0000ff">\cite{}</font> and the cursor to be put inside the curly brackets. 
That can be done with the following line in the abbreviation table:
<p><table border="1" cellspacing="0" cellpadding="0"  bgcolor="#e0e0e0"  width="100%">
<tr><td>
<pre>  (&quot;<font color="#00cd00">\\ci</font>&quot; &quot;<font color="#00cd00">\\cite{}</font>&quot; backward-char 0)</pre>
</td></tr>
</table><p>

After inserting <font color="#0000ff">\cite{}</font>, the standard emacs lisp function <i>backward-char</i>
is called, which moves the cursor back one character and thus positioning it inside the curly brackets.

<p>How about adding an entry in the abbreviation table to make <font color="#0000ff">\fr</font> expanded into <font color="#0000ff">\frac{}{}</font> and put the cursor inside the first
pair of curly brackets?  Well, we could repeat the above, but move
back the cursor three characters instead of one. Then we need to call
<i>backward-char</i> with the argument 3 (move back 3
chars). Unfortunately, the syntax of the abbreviation table does not
allow for that, so we are out of luck.

<p>But never give up. Let us make our own function to move the
cursor back 3 characters. That could not be easier.

<p><table border="1" cellspacing="0" cellpadding="0"  bgcolor="#e0e0e0"  width="100%">
<tr><td>
<pre><font color="#ee7600">; define an emacs lisp function to move the cursor back three characters
</font>(<font color="#f939ff">defun</font> <font color="#0000ff">move-back-three-chars</font> ()  <font color="#ee7600">; the function is called 'move-back-three-chars'</font>
  (interactive)                  <font color="#ee7600">; all emacs lisp functions must have this line</font>
  (backward-char 3)              <font color="#ee7600">; this function will do nothing but move the cursor 3 chars</font> 
  )</pre>
</td></tr>
</table><p>

Along the way we learned the syntax of an emacs lisp function. Now the  abbreviation for the  fraction would 
be defined as follows:

<p><table border="1" cellspacing="0" cellpadding="0"  bgcolor="#e0e0e0"  width="100%">
<tr><td>
<pre>  (&quot;<font color="#00cd00">\\fr</font>&quot; &quot;<font color="#00cd00">\\frac{}{}</font>&quot; move-back-three-chars 0)</pre>
</td></tr>
</table><p>


This could be done in a more elegant way. Define a function which will both do the insertion of 
<font color="#0000ff">\frac{}{}</font> and move the cursor inside the first pair of curly brackets. 

<p><table border="1" cellspacing="0" cellpadding="0"  bgcolor="#e0e0e0"  width="100%">
<tr><td>
<pre><font color="#ee7600">; an emacs lisp function to insert '\frac{}{}' and then move the cursor back three characters
</font>(<font color="#f939ff">defun</font> <font color="#0000ff">my-latex-fraction</font> ()
  (interactive)
  (insert &quot;<font color="#00cd00">\\frac{}{}</font>&quot;)    <font color="#ee7600">; insert a piece of text</font>
  (backward-char 3)        <font color="#ee7600">; move the cursor back three characters </font>
  )</pre>
</td></tr>
</table><p>

Let us save this function in <i>my-latex.el</i>, as we will call it
when in LaTeX mode. Define the corresponding abbreviation in
<i>my-abbreviations.el</i>:

<p><table border="1" cellspacing="0" cellpadding="0"  bgcolor="#e0e0e0"  width="100%">
<tr><td>
<pre>  (&quot;<font color="#00cd00">\\fr</font>&quot; &quot;<font color="#00cd00"></font>&quot; my-latex-fraction 0)</pre>
</td></tr>
</table><p>

Note the empty quotes here. That is because when <font color="#0000ff">\fr</font> is expanded,
at first nothing is inserted, and then the function <i>my-latex-fraction</i> is called which does all the work. 

<p> Also note an important fact. The abbreviations are stored in
<i>my-abbreviations.el</i>. If a given abbreviation needs to call a
function, and the function is user defined, then the body of that
function must be stored somewhere <i>outside</i> my-abbreviations.el.
If that abbreviation and the corresponding function is to be called in
LaTeX mode, then most appropriate place for the function to be stored
is in <i>my-latex.el</i>. 


<p>And here is the emacs lisp function necessary to insert the equation environment described at the beginning.

<p><table border="1" cellspacing="0" cellpadding="0"  bgcolor="#e0e0e0"  width="100%">
<tr><td>
<pre>(<font color="#f939ff">defun</font> <font color="#0000ff">my-latex-equation</font> ()      <font color="#ee7600">; a function to insert the equation environment
</font>  (interactive)                  
  (insert &quot;<font color="#00cd00">\\begin{equation}\\label{}\n</font>&quot;) <font color="#ee7600">; \n is the newline character
</font>  (insert &quot;<font color="#00cd00">  \n</font>&quot;)
  (insert &quot;<font color="#00cd00">\\end{equation}</font>&quot;) 
  (previous-line 3)              <font color="#ee7600">; move back to the line containing \begin... 
</font>  (forward-char 24)              <font color="#ee7600">; move inside the curly brackets
</font>  )</pre></td></tr>
</table><p>

<p> The last issue is how to tell XEmacs to expand a given abbreviation. A solution is the following: every time
the <i>space</i> key is hit, check if the recently typed word is an abbreviation. If it is, expand it, if it is not, just
insert an empty space, which is the normal behavior we would expect from the <i>space</i> key. I wrote
a function called <i>smart-space</i> to do this job. Here is the code for that (this needs to go in <i>my-latex.el</i>).

<p><table border="1" cellspacing="0" cellpadding="0"  bgcolor="#e0e0e0"  width="100%">
<tr><td>
<pre>(<font color="#f939ff">defun</font> <font color="#0000ff">smart-space</font> () <font color="#ee7600">; make the space key behave in a smarter way
</font>  (interactive)
  (<font color="#f939ff">if</font> (not (expand-abbrev)) <font color="#ee7600">; test if the current word is an abbrev. If yes, expand it.
</font>      (insert &quot;<font color="#00cd00"> </font>&quot;)          <font color="#ee7600">; If not, insert a plain space
</font>    )                       <font color="#ee7600">; Now you know how to use 'if' in emacs lisp
</font>  )
(local-set-key [(space)] 'smart-space) <font color="#ee7600">; bind the 'smart-space' function to the 'space' key</font></pre>
</td></tr>
</table><p>

Here is a <a href="my-latex"><i>my-latex.el</i></a> file which
contains the functions we defined above and some other ones also
useful in LaTeX-mode.  And here is the corresponding <a
href="my-abbreviations"><i>my-abbreviations.el</i></a> file
where the abbreviations (some calling functions from
<i>my-latex.el</i>) are stored.  Two reminders: first is that in order
for all this to work one must not forget to insert into the file
<i><i><a href="startup">init.el</a></i></i> the two pieces of
emacs lisp code at the beginning of this page. Second, the files
<a href="my-latex"><i>my-latex.el</i></a> and 
<a href="my-abbreviations"><i>my-abbreviations.el</i></a> need to go in the
<i><a href="startup">.xemacs</a></i> directory.

<p> But the tricks XEmacs has to offer are not over yet. One can define abbreviations on the fly,
by using the command <i>define-mode-abbrev</i>. Let us bind it to the shortcut <i>Alt-a</i> by inserting the following
in <i>my-latex.el</i>

<p>
<table border="1" cellspacing="0" cellpadding="2"  bgcolor="#e0e0e0"  width="100%">
<tr><td>
<pre>(local-set-key [(meta a)] 'define-mode-abbrev)<font color="#ee7600">; define abbrevs on the fly with Alt-a</font></pre>
</td></tr></table>

<p> Now, when you are typing a LaTeX document and notice that you
write <font color="#0000ff">\mathbb R</font> way to often, just hit
<i>Alt-a</i>, and set <font color="#0000ff">\r</font> to be an
abbreviation for it. When you exit XEmacs it will ask whether to
insert this abbreviation in <i>my-abbreviations.el</i> for future
use.

<p> Lastly, XEmacs also has <i>dynamic abbreviations</i>. If you for instance have the word <i>international</i>
in your document, then the second time you need it you can just type <i>inter</i>, then tell XEmacs to go and look up a
completion for you and finish the typing. The command for that is <i>dabbrev-expand</i>, which can be bound
for example to <i>Alt-space</i> by inserting the following in <i>my-latex.el</i>
<p>
<table border="1" cellspacing="0" cellpadding="2"  bgcolor="#e0e0e0"  width="100%">
<tr><td>
<pre>
(local-set-key [(meta space)] 'dabbrev-expand) <font color="#ee7600">; expand dinamic abbreviations with Alt-space</font></pre>
</td></tr></table>

<p> Of course, when you hit <i>Alt-space</i>, XEmacs might choose to expand <i>inter</i> to 
<i>internal</i>, if that word is also in your document. But then one can just hit <i>Control-z</i>
to undo this, type a couple more of letters in the word you want completed, and then try your luck again 
with a dynamic expansion. In my experience, this works well 95% of the time. 



<hr />

<table width="100%">
<tr>
<td align="left" width="20%">
<a href="index">
<img src="back.gif" border="0" alt="Back: " />XEmacs tips</a>
</td>
<td align="center"  width="20%">
<a href="mailto:aoleg@math.umn.edu">aoleg@math.umn.edu</a>
</td>

<td align="center" width="15%">
<a href="http://www.xemacs.org">
<img src="cbxSmall.jpg" border="0" alt="Created with XEmacs" /></a>
</td>


<td align="center" width="15%">
</td>

<td align="right">
Updated: March 07, 2004</td>
</tr>
</table>

</body>
</html>
