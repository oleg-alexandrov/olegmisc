bool getLine(ifstream &, std::string &);
bool isDigit(const char);
bool isHeap(const int *, int);
bool isInList(node *, int);
double eval_expr(const char *, int, int);
double myfun(int);
double myfun2(int);
endif for(int q = 0; q < n;);
endif for(int s = 0; s < n;);
int addOne(int);
int atoi(char *);
int bsearch(int *, int, int);
int delFromHeap(int *, int &);
int deleteAtBeg(list*&);
int deleteOneElem(list*&, int);
int edit_dist(const char *, int, const char *, int);
int find_stack_size(const char *, const char*);
int g(int);
int gg(int);
int insert(list*&, int);
int leftChild(int);
int myfun1(int, int);
int naive_search(int *, int, int);
int parent(int);
int pop(int &);
int push(int);
int randn(int);
int rightChild(int);
int rmLargestFromHeap(heap &);
string num2word(int, map<int, string> &);
void addToHeap(int *, int &, int);
void allocAndReturn(int, smartPtr &);
void doSort(int *, int, int);
void foo(int);
void formList(list*&, int);
void form_list(node *&, const int *, int);
void genAndPlot(int);
void getChars(ifstream &, std::string &);
void incrSubSeq(int *, int, vector<int> &);
void insertToHeap(heap &, int);
void insert_into_sorted(node*&, int);
void mergeLists(int *, int, int *, int, int *);
void mergeSort(int *, int, int *);
void mqsort(int *, int);
void myfun1(int);
void naiveIncrSubSeq(int *, int, vector<int> &);
void printArr(const int *, int);
void printHeap(const int *, int);
void printHeap(heap &);
void printInOrderNonRec(node*);
void printList(list *);
void printList(node *);
void printList2(list *);
void printSeq(int, int *);
void printTree(node *);
void print_arr(const int *, int);
void print_cnk(int, int);
void print_list(node *);
void print_nonconseq(int *, int, int);
void pushToListFront(node*&, int);
void push_back(int);
void push_front(int);
void qsort2(int *, int);
void reverseList(list*&);
void rv_str(char *, int);
void rv_str(char *, int, int);
void rv_word(char *, int, int);
void rv_words(char *, int);
void splitAtPivot(list *, int, list*&, list*&);
