function otsu()

   num_bins = 256;
   %counts = imhist(I,num_bins);

   fignum = 3;
   if fignum == 1
      
      counts = [45066 137829 45340 18661 10793 13268 11787 11578 12866 13872 15508 17202 19046 21797 24813 28444 33116 38474 44452 51966 59221 66584 72134 74241 73718 71087 66883 62202 57769 54317 50599 47439 44963 42821 40516 38436 36601 35557 33955 32715 31324 30122 29329 28406 27473 27023 25918 25590 24715 24411 23981 23233 22664 21888 21385 20778 19880 19619 18631 18205 17391 16771 16169 15548 15026 14511 14012 13540 13011 12405 12041 11785 11244 11019 10763 10621 10059 9729 9414 9122 8849 8729 8363 8164 7915 7611 7431 7203 6945 6670 6554 6169 5850 5600 5372 4964 4899 4738 4467 4210 4197 4028 3789 3719 3547 3638 3329 3181 3113 2983 2949 2845 2663 2647 2457 2435 2251 2189 2056 1985 1924 1839 1744 1578 1503 1489 1373 1330 1336 1278 1112 1121 1030 1000 914 897 873 784 773 715 721 662 634 576 579 493 456 420 406 426 367 339 340 285 271 253 220 239 207 189 164 153 142 135 122 97 110 90 85 81 74 65 65 58 52 54 54 41 50 52 38 39 34 34 38 27 24 29 27 30 22 19 24 19 21 19 12 19 23 16 17 13 11 14 16 11 11 8 16 8 10 9 8 7 12 9 8 10 5 6 5 6 4 2 8 3 3 3 4 5 2 0 1 2 1 1 3 0 2 2 1 2 1 2 1 3 1 1 2 0 0 0 0 0 1 1];
      
   else

      if fignum == 2
         counts = [33061 126094 136114 23177 14391 13788 14012 14901 15933 17037 18319 20166 21914 24162 26876 30302 33896 38895 44073 50901 58470 66158 73263 78356 79604 78878 75041 69297 63114 57177 51495 47542 43653 40789 38222 35704 33771 32143 30630 28519 27485 25902 24756 23656 22850 22282 21853 21215 20689 19976 19524 19077 18611 18108 17497 17060 16667 16303 16119 15552 15169 14701 14223 14169 13755 13605 12937 12544 12459 12019 11354 11111 10748 10338 10115 10015 9477 9120 8676 8575 8445 8334 7805 7636 7451 7280 6945 6808 6803 6333 6205 6046 5727 5611 5199 5001 4805 4512 4179 3978 3760 3630 3580 3365 3243 3049 2908 2838 2714 2578 2395 2294 2197 2052 1957 1852 1710 1680 1513 1399 1272 1381 1237 1169 1088 1094 946 993 883 848 843 795 748 681 690 644 577 602 511 551 523 467 462 433 418 408 357 350 340 280 307 280 253 252 234 207 186 190 187 164 148 151 137 105 129 126 92 87 93 93 79 76 70 51 59 54 44 41 37 49 53 28 38 44 34 35 31 38 26 13 24 16 24 18 20 26 15 16 14 20 19 19 9 20 7 17 13 10 15 12 6 8 6 4 4 11 3 12 6 3 6 4 2 6 4 3 6 3 1 4 4 2 4 4 1 0 1 1 3 2 1 0 4 2 0 1 2 0 0 0 0 0 1 1 1 2];
      else
         counts = [1671169 89 3446 66905 1172943 10816220 24329070 12076650 2061201 792793 636471 583271 569939 563625 568482 583924 595510 623343 635773 640800 684638 708632 729062 756992 773552 796997 812805 834471 858529 889521 927963 957649 987954 1019560 1046175 1077304 1109529 1134073 1168205 1200322 1229172 1242007 1271965 1323331 1372387 1430887 1463871 1494936 1514735 1531621 1543708 1560003 1559210 1545982 1504071 1460338 1433591 1415403 1397614 1367275 1323719 1273271 1232287 1199620 1153475 1106389 1051382 1005343 951108 904392 867623 838569 805183 768726 733591 698148 672497 639506 601280 573447 543946 512506 480207 450694 431427 413168 392615 368524 346594 329591 307156 284090 264973 245238 224296 205776 190935 178713 162632 137195 151540 122852 101395 113650 80277 80479 75681 54196 60609 46455 39879 41338 28828 29370 25815 19454 20699 15005 13800 13560 9295 9676 8192 5111 4895 9336 3390 2093 6907 3286 1253 4225 3017 926 2569 2584 789 1604 2140 792 998 1752 705 625 1368 669 407 1106 586 301 793 565 287 589 528 208 427 487 207 321 416 170 207 346 133 124 271 124 89 216 126 66 186 111 38 50 55 150 84 32 99 29 16 67 68 14 56 47 7 23 37 24 15 37 7 10 22 20 7 21 8 1 9 12 5 14 6 2 10 10 11 4 8 2 5 9 7 4 4 1 0 2 1 4 5 0 0 2 1 5 2 1 0 0 0 1 0 0 0 0 1 0 1 1 0 0 0 1 0 0 0 0 0 0 0 1];
         
         %counts = [1671184 1950 109684 4227989 31120253 24366042 3232037 758893 489221 441217 433260 441958 470884 482957 561653 573698 619436 666099 712186 750115 791104 849602 918281 961576 1000907 1070704 1085621 1117596 1153245 1137954 1156052 1139677 1174476 1157222 1157212 1132980 1118622 1091333 1059240 1025381 985886 959760 929278 922309 900384 880295 868151 847078 836633 817348 795797 794405 795003 792768 790536 784342 777638 770527 758341 746264 730254 718839 717739 724583 720065 723477 721261 717279 718654 711142 698530 703706 706750 705117 680473 700462 708361 698510 659278 616690 590710 584394 579627 562011 524434 480466 446719 424896 404308 375708 341898 209361 435651 159420 232061 259150 106243 261102 79609 168060 107937 78375 120372 38190 90387 38280 46097 44268 20170 36508 12921 22016 14167 10065 12987 4957 8815 4240 4876 4087 2472 3476 1578 2236 1333 1308 1250 726 1045 490 217 918 891 224 187 262 610 385 103 111 198 367 179 56 57 156 188 66 23 45 91 85 41 12 34 82 43 17 12 34 60 30 3 22 26 30 22 10 13 13 21 11 4 18 10 17 6 5 15 12 7 1 5 16 14 7 7 11 12 10 2 1 11 10 8 4 4 9 11 11 2 3 12 4 8 3 3 5 1 2 1 1 4 4 0 3 0 5 5 0 1 0 5 3 0 0 1 3 2 0 0 2 2 0 0 0 2 1 0 0 0 1 1 0 0 0 1 0 0 0 0 1 0 0 0 2];
      end
   end
   
   disp(sprintf('size of counts is %d', length(counts)));
   
   % Variables names are chosen to be similar to the formulas in
   % the Otsu paper.
   p = counts / sum(counts);
   omega = cumsum(p);
   mu = cumsum(p .* (1:num_bins));
   mu_t = mu(end);
   
   sigma_b_squared = (mu_t * omega - mu).^2 ./ (omega .* (1 - omega));
   
   % Find the location of the maximum value of sigma_b_squared.
   % The maximum may extend over several bins, so average together the
   % locations.  If maxval is NaN, meaning that sigma_b_squared is all NaN,
   % then return 0.
   maxval = max(sigma_b_squared);
   isfinite_maxval = isfinite(maxval);
   if isfinite_maxval
      idx = mean(find(sigma_b_squared == maxval));
      % Normalize the threshold to the range [0, 1].
      level = (idx - 1) / (num_bins - 1);
   else
      level = 0.0;
   end

   fignum
   figure(fignum); clf; hold on;
   plot(counts, 'b');
   %plot(counts1, 'r');
   %plot(max(counts)*sigma_b_squared/max(sigma_b_squared), 'c')
   
   plot(idx, counts(round(idx)), 'r*')
   level

   if idx <= 1
      idx = 2
   end

   imax = find(counts(1:(idx-1)) == max(counts(1:(idx-1))));
   imax = imax(1);
   plot(imax, counts(imax), 'g*')

   I = (imax+1):(idx-1);
   imin = find(counts(I) == min(counts(I))) + imax;
   imin = imin(1);
   plot(imin, counts(imin), 'c*')
   disp(sprintf('imax and imin are %d %d', imax, imin));
   disp(sprintf('min value is %f', min(counts(I))));
   plot(I, counts(I), 'r');
