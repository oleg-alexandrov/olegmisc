export ISISDATA=$HOME/projects/isis3data
export ISISROOT=$HOME/miniconda3/envs/asp_deps
export PATH=$HOME/projects/StereoPipeline/install/bin:$ISISROOT/bin:$HOME/bin:$PATH:/usr/bin:/usr/local/bin:.

export PERL5LIB=$PERL5LIB:$HOME/bin
export VISUAL=~/bin/custom_vim.sh

# These are workarounds for a XEmacs bug
export LANG=C
unset XMODIFIERS

export M=oalexan1@m.ndc.nasa.gov
export B=oalexan1@byss
export L1='oalexan1@lunokhod1'
export L2='oalexan1@lunokhod2'
export SS='oalexan1@spherescheetah'
export L=$L2
export A='oalexan1@astrobeast'
export A2='oalexan1@andey'
export C='oalexan1@chip'
export D='oalexan1@decoder'
export C3=pipeline@centos-32-5
export C4=pipeline@ubuntu-64-13
export C6=pipeline@centos-64-5
export DR=/byss/docroot/oalexan1
export e=$HOME/.bashenv
export r=$HOME/.bashrc
export a=$HOME/.bash_aliases
export z=$HOME/.zshrc
export GIT_SSH_COMMAND='ssh -o "StrictHostKeyChecking no"' # so that git does not ask questions
export MR=1737.4 # moon radius in km
export MM=3396.19 # mars radius in km
export ER=6378.137 # earth radius in km
export mmd=30323.3504241494820694 # meters per degree, on moon, 2*MR*pi*1000/360
export mamd=59274.6975233062216585 # meters per degree on mars, 2*MM*pi*1000/360
export emd=111319.4907932735726477 # meters per degree on earth, 2\*$ER\*$pi\*1000/360
unset MAILCHECK

function c2 {
  #for m in $M $H4 $H5 $H6 $H7 $H8 $H9 $H10 $H11 $H12; do
  for m in $M $H5 $B $L1 $L2; do
	 echo $m;
	 scp -r ~/.zshrc ~/.base* ~/.bash* .un* ~/.vimrc $m:\~/.
         scp ~/.ssh/config ~/.ssh/authorized_keys $m:\~/.ssh/
	 echo " "
 done
}

# On OSX, how to find the full path of where the libraries are loaded from:
# DYLD_PRINT_LIBRARIES=YES

# Salary 211,681.60
# Go to Workday. Click on Profile, then Personal.

# Visitor request. https://visitor-request.arc.nasa.gov/request/add
# 
# Working with Google's perf tools
# Need the things below even for ASP compilation!
#export CC="gcc -I$HOME/projects/packages/include -L$HOME/projects/packages/lib"
#export CXX="g++ -I$HOME/projects/packages/include -L$HOME/projects/packages/lib"
#Get libunwind.
# Compile libunwind and prof tools:
# ./configure --prefix=$HOME/projects/packages
# Compile and run ASP
# --enable-google-profiler --with-google_profiler=$HOME/projects/packages
# env HEAPPROFILE=mprof prog_name prog_options
# View: pprof --gv /full/path/to/exe mprof.0387.heap
# Also use with --text instead of --gv

# Working with virtual machines
# ping centos-32-5
# ssh centos-32-5
# ssh centos-32-5.hsd1.ca.comcast.net
# ssh centos-32-5.hsd1.ca.comcast.net -p 32
# ssh centos-64-5
# virsh --connect qemu:///system
# virsh -c qemu:///system list
# virsh -c qemu:///system list --all
# virsh list
# virsh list --all
# virsh start centos-32-5
# virsh start centos-64-5
# ssh centos-64-5 -l build
# virsh shutdown centos-64-5
#
# The image is located on lunokhod1 at
# /home/oalexan1/projects/libvrt/centos-64-5.img
# Instructions for how to manage a VM are at
# https://help.ubuntu.com/community/KVM/Managing
# virsh dumpxml centos-64-5 > centos-64-5.xml
# Then edit this, and then run:
# virsh define  centos-64-5.xml

# gcc compilation

#wget http://ftp.gnu.org/gnu/gmp/gmp-4.2.1.tar.gz
# ./configure --prefix=$HOME/projects/packages
# ./configure --prefix=$HOME/projects/packages --enable-languages=c,c++,fortran,objc,obj-c++ --with-gmp=$HOME/projects/packages --with-mpfr=$HOME/projects/packages --with-mpc=$HOME/projects/packages --build=x86_64-darwin

# wget http://mpfr.loria.fr/mpfr-2.2.1/mpfr-2.2.1.tar.bz2
# ./configure --prefix=$HOME/projects/packages --enable-languages=c,c++,fortran,objc,obj-c++ --with-gmp=$HOME/projects/packages --with-mpfr=$HOME/projects/packages --with-mpc=$HOME/projects/packages --build=x86_64-darwin

# gcc 4.2.1 (get also objc and gfortran and g++ and unzip in same dir)
#../configure --prefix=$HOME/projects/packages --enable-languages=c,c++,fortran,objc,obj-c++ --with-gmp=$HOME/projects/packages --with-mpfr=$HOME/projects/packages --with-mpc=$HOME/projects/packages --build=x86_64-darwin --host=x86_64-darwin

# Build with binary builder:
# md build; md tarballs/git; ./build.py --build-root build --download-dir tarballs

# Build pcl
# cmake .. -DCMAKE_INSTALL_PREFIX=$HOME/projects/packages -DBOOST_ROOT=$HOME/projects/base_system/include/boost-1_53 -DBOOST_LIBRARYDIR=$HOME/projects/base_system/lib -DEIGEN_INCLUDE_DIR=$HOME/projects/packages/include -DFLANN_LIBRARY=$HOME/projects/packages -DCMAKE_VERBOSE_MAKEFILE=ON

# Ports on mac. First install Macports without root.
# PATH=/usr/bin:/usr/sbin:/bin:/sbin ./configure --prefix=$HOME/projects/packages/macports --with-install-user=`id -un` --with-install-group=WWWWW --with-tclpackage=$HOME/projects/packages/macports/share/macports/Tcl --with-no-root-privileges
# Then delete -g WWWW from everywhere.
# Also see https://coderwall.com/p/njpsxg

# virsh edit centos-64-5
#Change the number of cpus
#<devices>
#   <filesystem type='mount' accessmode='mapped'>
#    <source dir='/media/raid'/> <target dir='raid_dir_tag'/>
#  </filesystem>
#</devices>
# Note that this gets saved not in the place it was added to.
# Shared storage
# virsh pool-define-as lv_guest_vm logical --source-name vg-main --target /dev/sdb1
#virsh pool-list --all
#http://docs.slackware.com/howtos:general_admin:kvm_libvirt#managing_storage_pools

# linux-ld-version.so to get full dynamic lib version.

# install centos
# wget http://mirrors.usc.edu/pub/linux/distributions/centos/5.9/isos/x86_64/CentOS-5.9-x86_64-bin-DVD-1of2.iso
# wget http://mirrors.usc.edu/pub/linux/distributions/centos/5.9/isos/x86_64/CentOS-5.9-x86_64-bin-DVD-2of2.iso
# virt-install -r 4096 --accelerate -n centos-6.0 -f ~/projects/libvrt/centos-6.0.img --cdrom CentOS-6.0-x86_64-bin-DVD1.iso
# Also can use:
# --vcpus=4
#   --vnc --vncport=5950

# virt-install -r 4096 --accelerate -n trusty-64 -f ~/projects/libvrt/trusty-64.img --vcpus=4 --cdrom CentOS-5.9-x86_64-bin-DVD-1of2.iso

# wget https://archive.org/download/centos-6.0_release/CentOS-6.0-x86_64-bin-DVD1.iso
# mkdir -p ~/projects/libvrt/
# fallocate -l 70000M ~/projects/libvrt/centos-6.0.img
# virt-install -r 8192 --accelerate -n centos-6.0 -f ~/projects/libvrt/centos-6.0.img --cdrom CentOS-6.0-x86_64-bin-DVD1.iso  --vcpus=8 --vnc --vncport=5950

# wget http://mirror.nsc.liu.se/centos-store/6.2/isos/x86_64/CentOS-6.2-x86_64-bin-DVD1.iso
# mkdir -p ~/projects/libvrt/
# fallocate -l 70000M ~/projects/libvrt/centos-6.2.img
# virt-install -r 8192 --accelerate -n centos-6.2 -f ~/projects/libvrt/centos-6.2.img --cdrom CentOS-6.2-x86_64-bin-DVD1.iso  --vcpus=8 --vnc --vncport=5950

#  virt-viewer centos-32-5 # connect to machine
# Connect to virtual machines by doing reverse port forwarding:
# * * * * *  ssh -f -N oalexan1@m.ndc.nasa.gov -R 3250:localhost:22
# yum -y install gcc-c++ gcc-gfortran libtool autoconf automake git subversion xorg-x11-server-Xorg libX11-devel mesa-libGL-devel freeglut-devel
#(If your git install fails, you may need to enable the EPEL repository.)
# Ubuntu
# wget 'http://www.ubuntu.com/start-download?distro=desktop&bits=64&release=latest'
# fallocate -l 50000M ~/projects/libvrt/ubuntu-64-13.img
# To wipe completely: virsh destroy ubuntu-64-13; virsh undefine ubuntu-64-13


#  ipfind --normalize sub64_cubes_45deg/AS15-M-1538.lev1.cub sub64_cubes_45deg/AS15-M-1539.lev1.cub
# ipmatch sub64_cubes_45deg/AS15-M-1538.lev1.cub sub64_cubes_45deg/AS15-M-1539.lev1.cub -r homography --debug
# eog sub64_cubes_45deg/AS15-M-1538.lev1__AS15-M-1539.lev1.tif

# password for centos is centos

# FreeFlyer
# export PATH=$HOME/projects/zack_packages/local/bin:$PATH
# export LD_LIBRARY_PATH=$HOME/projects/zack_packages/local/lib:$HOME/projects/zack_packages/local/lib64
# build freeflyer
# If cannot find yaml
# export PKG_CONFIG_PATH=/u/oalexan1/projects/packages/lib/pkgconfig
# cmake ~/projects/freeflyer  -DCMAKE_BUILD_TYPE=RelWithDebInfo -DUSE_ROS=OFF -DGLOG_LIBRARY=$HOME/projects/packages/lib/libglog.so -DGFLAGS_INCLUDE_DIR=$HOME/projects/packages/include -DGFLAGS_LIBRARY=$HOME/projects/packages/lib/libgflags.a -DGFLAGS_NAMESPACE=gflags -DYAMLCPP_INCLUDEDIR=$HOME/projects/packages/include/yaml-cpp -DYAMLCPP_LIBRARY=$HOME/projects/packages/lib/libyaml-cpp.so -DYAMLCPP_LIBRARIES=$HOME/projects/packages/lib/libyaml-cpp.a -DYAMLCPP_INCLUDE_DIRS=$HOME/projects/packages/include/yaml-cpp -DYAMLCPP_INCLUDEDIR=$HOME/projects/packages/include/yaml-cpp -DUSE_DDS=OFF -DUSE_DRIVERS=OFF -DUSE_DDS=off
# cmake .. -DCMAKE_CXX_COMPILER=$HOME/projects/zack_packages/local/bin/g++ -DCMAKE_C_COMPILER=$HOME/projects/zack_packages/local/bin/gcc -DCMAKE_INSTALL_PREFIX:PATH=$HOME/projects/FreeFlyerMLP/install

# ~/projects/FreeFlyerMLP/build/tango_utilities/parse_tango --data_directory data/data/gov.nasa.arc.irg.spheres.android.barerecord/files/2014Sep04_143632/superframes/ --write_cropped_image --output_directory crop11

#f=2015-03-27-15-52-12_open_spiral.bag
# rostopic echo -b $f  -p  /usb_cam/image_raw  --noarr > $f.images.csv; rostopic echo -b $f  -p /overhead_vo  > $f.vo.csv

# freeflyer/Software/calibration_files/granite_lab_tags.xml
# freeflyer/communications/ff_frame_store/launch/ff_frame_store.launch
# rosrun localize localization_node closed_spiral_dist_incr.map.registered.ORGBRISK.map  -num_similar 20 -vocab_db closed_spiral_DBoW2_ORGBRISK_depth4.db
# also copy closed_spiral_DBoW2_ORGBRISK_depth4.db.txt and images?
# odroid, pass is odroid
# odroid@10.42.0.35
# Run on spheresgoat
# source /opt/ros/indigo/setup.bash
# on spheresgoat:
#export ROS_IP=10.42.0.104 # wired p1l1 # before was wireless 10.42.0.50
# but first do hostname -I and pick the second
# also can do ifconfig and search for appropriate interface
# run on spheresgoat only if odroid is on
# Copy the ROS_MASTER_URI from the output of roscore,
# and set that variable on odroid.
#example: export ROS_MASTER_URI=http://10.42.0.104:11311
#ssh odroid@10.42.0.35
#export ROS_HOSTNAME=10.42.0.35 # only on odroid
# rosrun rviz rviz # on spehresgoat
# roslaunch usb_cam.launch # on odroid
# rostopic hz
# subscribe to odroid topic
# rosrun rviz rviz # on spheresgoat
# set the fixed frame to world in the rviz gui
# rostopic list # on both spheresgoat and odroid
# from rviz, add by topic in ref to world
# subscribe to odroid topic
# MUST make sure to use the release build!

# source ~/projects/freeflyer/install/setup.sh

        # roscd gscam
# roslaunch gscam.launch
# rosrun image_view image_view image:=/navcam/image_raw
# rosbag record /navcam/image_raw
#extract_image_bag -bag_file *bag  -image_topic /navcam/image_raw
#time_run.sh ~/cmake_build/bin/calibration_from_images -grid_spacing 0.00726 bag/*.jpg

# copy small10000_repeat_circle_angle1_incr2.ORGBRISK.map.registered.map repeat_circle_DBoW2_ORGBRISK_depth\*.db\*
# source ./rosbag.sh; rosbag play 2015-04-23-16-52-15.bag
# run /bin/localization_node small10000_repeat_circle_angle1_incr2.ORGBRISK.map.registered.map  -num_similar 40 -vocab_db repeat_circle_DBoW2_ORGBRISK_depth4.db --verbose
# ~/projects/freeflyer/install/bin/localization_node small10000_repeat_circle_angle1_incr2.ORGBRISK.map.registered.map -num_similar 40 --verbose  -vocab_db repeat_circle_DBoW2_ORGBRISK_depth4.db

#build_map   --detector ORGBRISK --descriptor ORGBRISK -feature_detection -feature_matching -camera_calibration distortion.xml -output_map arm.map repeat_circle_angle1_dist/format12068.jpg image23.jpg

# sudo chroot ~/armhf_trusty_chroot
# That mimics a ARM/linux system whose root path is in ~/armhf_trusty_chroot.

# on spheresgoat, run flycap

# /usr/bin/time /armhf/bin/localize repeat_circle_angle1_incr_dist.map.ORGBRISK.registered.map image23.jpg  -vocab_db repeat_circle_dist_DBoW2_ORGBRISK_depth4.db -num_similar 40

# vlc GMT197_18_18_Scott.mp4 --video-filter scene --vout=dummy --scene-ratio=30 --scene-path .

# Installing homebrew on mac
# http://superuser.com/questions/619498/can-i-install-homebrew-without-sudo-privileges
#- Add "~/local/bin/" to PATH variable
#export HOMEBREW_PREFIX="/Users/oalexan1/usr/local"; export PATH=$HOMEBREW_PREFIX/bin/:$PATH
#mkdir -p /Users/oalexan1/usr/local
#~/bin/install.rb   
# brew doctor
# brew install wget
# brew install gcc
# brew install automake
# brew install libtool
# brew install  gcc48 --with-fortran 

#vncserver -geometry 1800x1080
# vnc ssh spheresgoat -N -f -L 6000:localhost:5901

# if [ 1 -eq 0 ]; then
#     export FF_ROOT_DIR=$HOME/projects
#     export FF_ROOT_BIN=$HOME/cmake_build

#     source /opt/ros/indigo/setup.bash
#     source $FF_ROOT_BIN/devel/setup.bash
#     export ROS_PACKAGE_PATH=$FF_ROOT_BIN/devel/share/:$ROS_PACKAGE_PATH
#     export ROSLAUNCH_SSH_UNKNOWN=1
#     export ROS_HOSTNAME=10.42.0.50
#     export ROS_MASTER_URI=http://10.42.0.50:11311

#     This step assume that you have the arm binaries ready in $FF_ROOT_DIR/armhf
#     cd $FF_ROOT_DIR
#     ./freeflyer/tools/install_to_astrobee.sh armhf

#     #$FF_ROOT_DIR/freeflyer/tools/install_to_astrobee.sh $HOME/tmp/armhf
#     roslaunch astrobee proto3.launch disable_fans:=true
    
#     rosbag record /nav_cam/image /ground_truth  /imu/data

#     # New instructions
#     cd
#     touch setup.bash
#     export _CATKIN_SETUP_DIR=/opt/ros/kinetic
#     source  $_CATKIN_SETUP_DIR/setup.bash

#     # ?
#     #source ~/freeflyer_build/native/devel/setup.bash 
    
#    # roscore #?

#     export ASTROBEE_ROBOT=p4d
#     export ASTROBEE_WORLD=iss
#     export ASTROBEE_RESOURCE_DIR=$HOME/freeflyer/astrobee/resources
#     export ASTROBEE_CONFIG_DIR=$HOME/freeflyer/astrobee/config
#     export LD_LIBRARY_PATH=/opt/ros/kinetic/lib:/opt/ros/kinetic/lib/x86_64-linux-gnu:$HOME/freeflyer_build/native/lib:$HOME/freeflyer_3rdparty/lib
#     export PATH=$HOME/freeflyer_build/native/bin:$PATH
    
#     #Add symlink for camera (from camera.cc in freeflyer repo):

#     #// To create symbolic link to device:
#     # First query it and search for serial number:
#     # udevadm info -q all -a -n /dev/video0
#     #// Create rule in /etc/udev/rules.d, e.g.:
#     # sudo vim  /etc/udev/rules.d/10-local.rules 
#     #// SUBSYSTEM=="video4linux", ATTRS{serial}=="23610472",SYMLINK+="nav_cam"
    
#     #To launch just camera node:
#     #roslaunch astrobee granite.launch mlp:=local llp:=disabled nodes:=nav_cam,framestore

#    # p4c mlp
#    ssh astrobee@10.42.0.25

#    # p4d llp
#    ssh astrobee@10.42.0.26  

#    # p4d
#    #robot_mlp_address = "10.42.0.32"
#    #robot_llp_address = "10.42.0.31"

#    #robot_names=(p4c p4d killer bsharp honey dock)
#    #mlp_ips=(10.42.0.25 10.42.0.32 10.42.0.35 10.42.0.38 10.42.0.5 10.42.0.1 )
#    #llp_ips=(10.42.0.26 10.42.0.31 10.42.0.34 10.42.0.37 10.42.0.4 0.0.0.0   )

# ##   # on astrobee 
#    export ROS_MASTER_URI=http://10.42.0.50:11311

#    # on spheresgoat 
#    cd ~/freeflyer_build/native
#    source ./devel/setup.sh
#    export ROS_MASTER_URI=http://10.42.0.50:11311
#    export ROS_HOSTNAME=10.42.0.50 # or 10.42.0.51
#    export ROSLAUNCH_SSH_UNKNOWN=1
#    roslaunch astrobee mgtf.launch world:=granite nodes:=nav_cam llp:=disabled
   
#    # on spherescheetah
#    export ROS_HOSTNAME=10.42.0.51
#    export ROSLAUNCH_SSH_UNKNOWN=1
#    export ROS_IP=${ROS_HOSTNAME}
#    export ROS_MASTER_URI=http://${ROS_HOSTNAME}:11311
#    # export ROS_HOSTNAME=spherescheetah.ndc.nasa.gov
#    # export ROS_MASTER_URI=http://spherescheetah.ndc.nasa.gov:11311/           
#    source ~/freeflyer_build/native/devel/setup.zsh
#    # roslaunch astrobee p4d.launch world:=granite nodes:=nav_cam llp:=disabled
#    roslaunch astrobee granite.launch robot:=p4d llp:=10.42.0.31 mlp:=10.42.0.32 nodes:=nav_cam llp:=disabled
#    # source /opt/ros/kinetic/setup.sh
#    rosbag record -a
   
   #To cross compile, first copy the file:
   #oalexan1@volar:/home/p-free-flyer/free-flyer/FSW/images/latest/cross.tar.bz2
   #in the cross-complie root directory and unzip it there.

# To cross-compile, follow the NASA_INSTALL.md instructions.
# Also do: export INSTALL_PATH=/home/oalexan1/freeflyer_install/armhf; export SOURCE_PATH=$HOME/freeflyer; export ARMHF_CHROOT_DIR=$HOME/arm_cross/rootfs; export ARMHF_TOOLCHAIN=$HOME/arm_cross/toolchain/gcc; PATH=/usr/bin:$PATH; export BUILD_PATH=$HOME/freeflyer_build/armhf
# Put in .ssh/config for wannabee:
#Host wannabee-mlp 10.11.42.41
#  Hostname 10.11.42.41
#  User astrobee
#
#Host wannabee-llp 10.11.42.40
#  ProxyCommand ssh -q astrobee@10.11.42.41 nc llp 22
#  User astrobee

# and do ssh-copy of the key to those machines. Also put these in the repo (without checking in)
# in scripts/deploy/constants.sh


   # To work with GDS:
   # https://babelfish.arc.nasa.gov/bamboo/browse/FF-GDS-869
   #	 Click on build artifacts and download the one for your platform.
   #	  Make folder in home dir called gds
   #	  Rename the tarball to latest
   #	   Checkout FFFSW-667
   # copy your .ssh public key to the robot first
   #
   # roslaunch astrobee granite.launch robot:=p4d llp:=10.42.0.31 mlp:=10.42.0.32 gds:=true agent1:=P4D output:=screen 
   # with vive:
   # roslaunch astrobee astrobee.launch robot:=p4d llp:=10.42.0.31 mlp:=10.42.0.32 extra:=vive
   # Record data for Jesse:
   # rosbag record -e "(/hw/imu|/loc|/gnc|/mob|/hw/vive).*" 
   # Use instead: localization/vive_localization/recorder.bash to record vive data

   # In simulation:
   #   roslaunch astrobee sim.launch output:=screen gds:=true mlp:=localhost llp:=disabled nodes:=nav_cam,framestore world:=DetailIssWorld ns:=honey agent1:=honey 
   #roslaunch astrobee sim.launch output:=screen gds:=true 
   #
   # Modify astrobee/config/management/data_bagger.config
   # to select where to put the data
   # more exactly, +bags_save_directory = /home/oalexan1/bags if not on the robot
   # The bags get saved on the robot if in robot mode!
   # Later will need to pull the data.
   # bags are stored in /data/bags on the robot, and they start with immediate*

# Code is in management/data_bagger/src/data_bagger.cc
   #  Please put mlp ip in kmbrowne@ubuntu:~/gds/latest$ vim configuration/org.eclipse.osgi/56/0/.cp/NDDS_DISCOVERY_PEERS
   # Copy files to cp /mnt/hgfs/vm_shared/img.json ControlStationConfig/DataToDisk/
   # 
   # If you want to change camera settings go to ControlStationConfig/SetCameraPresets.JSON
   # and then launch again
   # May also have to change:
   # ./astrobee/config/communications/dds/NDDS_DISCOVERY_PEERS ./submodules/common/communications/dds/NDDS_DISCOVERY_PEERS
# Mention about rebooting the bot if any process dies

 
#        Go to the Teleoperate tab
#         Click Grab Control
#         Under Camera to configure, select Navigation, select the name of your configuration, and click set
#         Under Camera to stream, select Navigation, select true for streaming and click send
#         In the bottom right, Click on Live Images and then select Navigation
#         Click on Advance 2 tab
#         At the bottom right, use the drop down menu to select your file and then click configure data.
#         Click the debugging tab
#         In the config commander, select the robot in the first drop down and data in the second drop down
#         Click on setDataToDisk
# 
# Ctrl + l shows the log.
 
# How to start the simulation avoiding the sim camera problem
# First edit: astrobee/config/simulation/simulation.config
# and turn on the nav_cam_rate.
# Then, first launch:
# roslaunch astrobee sim.launch default:=false rviz:=true speed:=0.1
# Wait until it starts everything, more like 45 seconds to 1 minute.
# Then, in a second terminal launch:
# roslaunch astrobee spawn.launch ns:=bumble pose:="10.93 -9.2 4.85 0 0 0 1" 

#  to avoid camera errors.

# on the bot
# export ROS_MASTER_URI=http://mlp:11311
#  roslaunch astrobee astrobee.launch mlp:=mlp llp:=disabled nodes:=calibration_nav_cam,calibration_dock_cam,calibration_imu,pico_driver,framestore
# roslaunch /opt/astrobee/share/pico_driver/launch/pico_proxy.launch topic:=/hw/depth_perch/extended
# rosbag record /hw/cam_nav /hw/depth_perch/extended/amplitude_int /hw/depth_perch/points /hw/depth_haz/extended/amplitude 

# Fix disk errors on astrobee
# umount /data
# sudo fsck.ext4 -n -v /dev/mmcblk1p1 # check
# sudo fsck.ext4 -y -v /dev/mmcblk1p1 #  fix

   
# To filter images by time	
# in=tmp1.bag; out=tmp2.bag;

# Get images within 0.1 seconds of 1 second.
#  rosbag filter $in $out  "(topic == '/mgt/img_sampler/nav_cam/image_record') and (float(t.nsecs)/1e+9 <= 0.1)"

# rosbag filter --print="'%s @ %d nsec %g\n' % (topic, t.secs, float(t.nsecs)/1e+9)"  $in $out  "(topic == '/hw/cam_nav') and ((float(t.nsecs)/1e+9 <= 0.1) or ( (float(t.nsecs)/1e+9 >= 0.5) and (float(t.nsecs)/1e+9 <= 0.6)  ) )"
#in=immediate_2019-01-16-00-13-33.bag; out=out.bag;  rosbag filter --print="'%s @ %d nsec %g\n' % (topic, t.secs, float(t.nsecs)/1e+9)"  $in $out  "(topic == '/mgt/img_sampler/nav_cam/image_stream') and ((float(t.nsecs)/1e+9 <= 0.1) or ( (float(t.nsecs)/1e+9 >= 0.5) and (float(t.nsecs)/1e+9 <= 0.6)  ) )"

# Old copy command to pull data from astrobee.    
# rsync -avzP astrobee@10.42.0.25:/data/tmpoleg/filtered_bag1.bag .


#   To be able to record the amplitude, which is necessary for haz_cam
#calibration, the file cameras.config (on astrobee, not on the local
#machine) needs to be edited before calibration.launch is started. The
#api_key variable in the picoflexx section should be set to the correct
#value. This will cause the depth camera to run in L2 mode, and produce
#data on the "extended" topic.
#/royale/src/CameraManager.cpp has the L2 key
#echo -n "walnuts are great" | sha1sum 
# d79dab562f13ef8373e906d919aec323a2857388 -

#move bot
# rosrun mobility teleop -move -pos "10.5 -7.2" # leave z unchanged
# rosrun mobility teleop -move -pos "9.5 -9.51 4.50" -att "0 0 0 1" # Try to dock
# rosrun mobility teleop -move -pos "10.5 -9.51 4.50" # move away from dock
# rosrun mobility teleop -move -pos "10.9 -9.51 4.50" -att "1.5708 0 0 1"  # face forward
# rosrun mobility teleop -move -pos "10.9 -9.51 4.50" -att "0 0 0 1"  # face sideways
# Move way from the wall after undocking
# rosrun mobility teleop -move -pos "10.9 -9.51 4.50"
   
# rosrun dock dock_tool -dock # when close
# rosrun dock dock_tool -undock
# rostopic echo -n 1 /tf # query position and orientation

# The box in the JPM in which astrobee can move and rotate freely.
# The longest dimension of the module is along the Y axis.
# X range:  10.4   11.4
# Y range: -9.75  -3.5
# Z range:  4.0    5.7
# The Z axis goes down.

#    As most of you are aware, there was an issue with the ARC VPN
#    (arcvpn.nasa.gov) for all of Ames. It looks like the problem has
#    been fixed. If the ARC VPN goes down again, you can use
#    “jscvpn.nasa.gov” as an alternative. When you use this one, you
#    will need to select “ARC Teleworker - Sec” for the profile to
#   use.
#fi


# If the following entry exists in .ssh/config on pfe:
# Host laptop
#  Hostname localhost
#  Port 9005
#  User oalexan1
#  CheckHostIP no

# then the commands below should be able to grant access from pfe to local machine

# Run on L1:
# ssh pfx -N -f -R 9005:localhost:9005

# Run on local machine:
# sl1 -N -f -R 9005:localhost:22

# Try this:
# On L1: ssh pfe22 -N -f -L 4012:localhost:22 -R 4007:localhost:22 -R 9005:localhost:9005

# For vnc:
# First start vnc2 on pfe. Note the port, which needs to be changed below. Then:
# On L1:
# p=5982; q=5982; ssh pfx -N -f -L ${p}:localhost:${q}
# On local machine:
# p=5982; q=${p}; sl1 -N -f -L ${p}:localhost:${q}; vncviewer -PasswordFile=$HOME/.vnc/passwd localhost:${p} &

# TurboVNC on spherescheetah without root
# dpkg -x ~/Downloads/turbovnc_2.2.1_amd64.deb ~/projects/packages
# ~/projects/packages/opt/TurboVNC/bin/vncserver -geometry 1800x1080

# putty with ultravnc works very well from Windows to L1 without installation

# First ssh from L1 to pfe21 and do port forwarding
# ssh pfe21 -N -f -R 4004:localhost:22 -L 4004:localhost:22
# Only here have to use the SecurID

# Then use that to establish connection from L1 to pfe27
#ssh pfe27 -o ProxyCommand='ssh localhost -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p 4004 -l oalexan1 nc pfe27 22' -N -f -R 4004:localhost:22

# Now can go back from pfe27 to L1:
# ssh localhost -p 4004  -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no

# How to connect from centos7 to pfe.

# Run on m:
# ssh pfe21 -L 4010:localhost:22 -N -f

# Run on centos7
#ssh m.ndc.nasa.gov -L 4010:localhost:4010 -l oalexan1 -N -f
#ssh m.ndc.nasa.gov -R 8006:localhost:22 -N -f -l oalexan1 # to connect from m to centos7

# On m and centos7 in ~/.ssh/config
#Host pfx
#  Hostname localhost
#  HostKeyAlias pfx
#  CheckHostIP no
#  Port 4010
#  User oalexan1

# On m and any other machine from which we want to connect to centos7:
#Host centos7
#  Hostname localhost
#  HostKeyAlias centos
#  CheckHostIP no
#  Port 8006
#  User pipeline

# From any other machine also run:
# ssh m.ndc.nasa.gov -L 8006:localhost:8006 -N -f

# Run on centos7
# ssh pfx -R 4011:localhost:22 -N -f

# On pfe21 in ~/.ssh/config
# Host centos7
#   Hostname localhost
#   HostKeyAlias centos7
#   CheckHostIP no
#   Port 4011
#   User pipeline

# Connect to astrobeast first
# wannabee
#ssh astrobee@10.11.42.41 
# p4d
# ssh astrobee@10.11.160.90
# ssh ssh astrobee@10.11.160.88 # bsharp

# How to do port forwarding to access ros nodes that run on a different machine
# ssh 10.42.0.90 -N -f -L 5004:localhost:11311; unset ROS_IP; export ROS_MASTER_URI=http://${ROS_IP}:5004

# Copy only DEMs:
# rsync -P -avz -e 'ssh oalexan1@lunokhod1 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no' :projects/StereoPipelineTest $HOME/projects --include="*/" --include="*/run/run-DEM.tif" --exclude="*"


# ASK sg to install valgrind, kvm, libvirt-bin
# qemu-kvm libvirt libvirt-python libguestfs-tools virt-install valgrind

# To turn on the flashlight:
# rosservice call /hw/light_front/control 100 (values go from 0 to 200)

# To merge bags, open all of them in rqt_bag and export the merged result.

# To wake the bsharp remotely:

# *       ssh into the dock (ssh dock)

# Wake up bsharp and wannabee
# /opt/astrobee/ops/wake_hibernating_astrobees.bash 1 # bsharp
# /opt/astrobee/ops/wake_hibernating_astrobees.bash 2 # wannabee

# Put them to sleep
#/opt/astrobee/ops/hibernate_awoken_astrobees.bash 1 # bsharp
#/opt/astrobee/ops/hibernate_awoken_astrobees.bash 2 # wannabee

# Status
# /opt/astrobee/ops/get_status_short.bash

# Run on astrobeast to sync the time on all processors of the robot
#ssh -t astrobee@XXX.XXX.XXX.XXX "/opt/astrobee/ops/set_time.bash $(date '+%s.%N')"
# Pass: root:A$tr0bee!

# Old stuff below

# *       run the dock test

# o   [dock] astrobee@dock:~$ dock_test

# *       Follow the menu and check that bsharp is not already awake (Get connection state option). If it is awake, someone else is probably using it so you should coordinate with them to see when you can use it.

# o   13 -� 1   (Scroll up and check the 'Power mode:')

# *       Wake bsharp by following the menu (Set EPS command option)

# o   15 -� 1 -� 3

# *       Follow the menu and check that bsharp woke up successfully.

# o   13 -� 1   (Scroll up and check the 'Power mode:')

 

# To hibernate the bsharp remotely:

# *       ssh into the dock

# *       run the dock test

# o   [dock] astrobee@dock:~$ dock_test

# *       Hibernate bsharp by following the menu (Set EPS command option)

# o   15 -� 1 -� 2      

# *       Follow the menu and check that bsharp hibernated successfully.

# o   13 -� 1   (Scroll up and check the 'Power mode:')
# Host dock
#  HostName 10.11.64.150
#  User astrobee

# Host bsharp-mlp 10.11.160.88
#   Hostname 10.11.160.88
#   User astrobee

# Host bsharp-llp
#   ProxyCommand ssh -q astrobee@10.11.160.88 nc llp 22
#   User astrobee

# Host wannabee-mlp 10.11.42.41
#   Hostname 10.11.42.41
#   User astrobee

# Host wannabee-llp 10.11.42.40
#   ProxyCommand ssh -q astrobee@10.11.42.41 nc llp 22
#   User astrobee

#wannabee berth 2
#bsharp  berth 1.

# Start freeflyer software on wannabee: systemctl --user start fsw

# How to peek into a lib (see the ld symbols):
# strings ~/miniconda3/envs/test/lib/libtbb.so.2| grep CXXABI_
# How to find the compiler used:
# readelf -p .comment mylib.so
# See rpath:
# objdump -x mylib.so | grep RPATH
# Or readelf -d ~/miniconda3/envs/asp/bin/stereo_pprc | grep path

# To Set RPATH, use chrpath -r.

# To install local package
# conda install --use-local <package name>

# Find what's on my channel
# conda search -c oleg-alexandrov --override-channels --info

# Windows:
# conda install -c conda-forge m2w64-gcc qt=5.12 make
# qmake polyview.pro -spec win32-g++

#C:\Users\oalexan1\Miniconda3\envs\polyview\Library\mingw-w64\bin\gcc.exe
# cmake ..  -DCMAKE_C_COMPILER=C:\Users\oalexan1\Miniconda3\envs\polyview\Library\mingw-w64\bin\gcc.exe -DCMAKE_CXX_COMPILER=C:\Users\oalexan1\Miniconda3\envs\polyview\Library\mingw-w64\bin\g++.exe

# Creating conda channels
# https://enterprise-docs.anaconda.com/en/docs-site-5.0.5/user-guide/packages/anaconda-cli.html

# conda install anaconda-client
# anaconda login  # Logs in with anaconda.com login

# anaconda remove nasa-ames-stereo-pipeline/mgm to remove a package
# anaconda remove nasa-ames-stereo-pipeline/multiview/asp_3.2.0 # to remove a specific version

# The channel name is the same as user name! Hence make a new user name
# and can upload packages to that channel!
# Made: https://anaconda.org/nasa-ames-stereo-pipeline/gdal

# anaconda upload -u oleg-alexandrov /home/oalexan1/miniconda3/envs/tools/conda-bld/linux-64/polyview-1.0-h3fd9d12_0.tar.bz2
# From Linux can upload a Windows package as well, it will be redirected to the right place.

# On Windows, fetch the latest polyview from the GitHub actions artifacts. Then unzip it and uploaded from Linux. Do this on lunokhod1.

# Create env from list 
# conda env create -f conda/asp_deps_3.1.0_linux_env.yaml

# When VPN does not work.
# As a workaround, We recommend using the secondary profile jscvpn.nasa.gov as follows:
# Open Cisco AnyConnect client
# Replace the "ARC-Teleworker-Pri" with jscvpn.nasa.gov or arcvpn.nasa.gov
# Click connect and
# then select the profile "ARC-Teleworker-Sec" when prompted

# Replace non-ascii characters:
#  perl -pi -e "s#<e2><80><99>#'#g" tutorial.rst
# XEmacs can't handle it well, better do this in gnome-terminal.

# get fvwm
# wget https://github.com/fvwmorg/fvwm/releases/download/2.6.9/fvwm-2.6.9.tar.gz
# Also note my own hacked version to properly place windows

# make files non-executable
#for f in $(find . -type f); do chmod a-x $f; done
# make dir executable
#for f in $(find . -type d); do chmod a+rx $f; done

# tmux to set the status on top
# tmux set -g status-position top

# David suggests Copernicus 30m DEM over the SRTM-GL1 products.
# https://portal.opentopography.org/raster?opentopoID=OTSDEM.032021.4326.3

# Forwarding from l1. Make this automatic.
# sl1 -N -f -R 4005:localhost:22
# Run docs on l1.
# cdbo; fm \* ../\*.rst; PATH=$HOME/miniconda3/envs/sphinx/bin:$PATH make html; rs -e "ssh localhost -p 4005" _build :Desktop >/dev/null

# Edit zsh history, save it, and in a different tab run fc -R.
# fc -L 100 lists previous 100 commands.

# Use awk to do operations on columns of a text file:
# cat file.txt | awk '{ print 1000.0 + $1, $2, $3 }'

# To compile on astrobeast, first do from local machine:
# ssh astrobeast -N -f -R 5001:localhost:22
# then from astrobeast:
# cd ~/projects/isaac; source ~/projects/astrobee_build/devel/setup.zsh; source ~/projects/isaac/devel/setup.zsh; rs -e "ssh localhost -p 5001" :projects/isaac/src/dense_map src; catkin build geometry_mapper

# Merge, and keep our changes to a code block if it has a conflict
# git merge -Xours origin/develop

#To do the expenses:
#perl -pi -e 's/[^[:ascii:]]//g' ~/projects/todo2.m; perl -pi -e 's/\-//g' ~/projects/todo2.m; perl -pi -e 's/\$//g' ~/projects/todo2.m

# Delete remote branch with git: git push origin --delete oleg-alexandrov-patch-1
# For local branches which can't be deleted, do git fetch --all --prune.

# To not buffer with tee,
# stdbuf -o0 ./run.sh | tee output.txt

# Use wget -r to get directories from an ftp site

# Use this to wipe unicode
#  cat tmp.txt | tail -n 1 | iconv -f utf-8 -t ascii//TRANSLIT

# Extract a portion of the bag
# rosbag filter survey.bag survey_part1.bag "t.secs >= 1641220410 and t.secs <= 1641220499"

# convert heic to jpg on linux
# Go to the shared folder
# https://github.com/strukturag/libheif/issues/347
# for f in *heic; do g=${f/.heic/.jpg}; heif-convert -q100 $f ~/out/$g; done
# outsize
# md ~/out3; for f in *jpg; do ec $f; convert -resize 50% $f ../out3/$f; done

# Three quota commands on Pleiades for different partitions
# nbquota
# lfs quota -h -u oalexan1 /nobackupp16
# quota -v
# df -kh /nobackupnfs1/oalexan1 for nfs

# Kill screen:
# screen -X -S 14954.luno2 kill

# meshlab viewport clipping, to not make the mesh disappear on zoom
# Use control shift mouse wheel

if [ 1 -eq 0 ]; then 

# Dealing with gh (github tool)
# conda install gh --channel conda-forge
# conda activate gh
# cd ~/projects/StereoPipeline
# gh workflow list -R https://github.com/NeoGeographyToolkit/StereoPipeline
# gh workflow run ssh -R https://github.com/NeoGeographyToolkit/StereoPipeline
# gh workflow run build_test -R https://github.com/NeoGeographyToolkit/StereoPipeline 
# gh run list --workflow=ssh.yml -R https://github.com/NeoGeographyToolkit/StereoPipeline 
# gh run list -R https://github.com/NeoGeographyToolkit/StereoPipeline --workflow=build_test.yml

# See the runs, including the one that is running
# gh run list --workflow=build_test.yml -R https://github.com/NeoGeographyToolkit/StereoPipeline

# See the one in progress
# gh run list --workflow=build_test.yml -R https://github.com/NeoGeographyToolkit/StereoPipeline -s in_progress

# Watch the current run
gh run watch -R https://github.com/NeoGeographyToolkit/StereoPipeline run_id

# Then download by id. 
mkdir tmp
cd tmp
gh run download -R https://github.com/NeoGeographyToolkit/StereoPipeline 6319967107

# This will download a directory called StereoPipeline-${{ runner.os }} having tarballs.

# Create release
# Got to the dir having StereoPipelineTest
# Need these as permisions are messed up in the artifacts
chmod a+x StereoPipelineTest/bin/* StereoPipelineTest/*/*sh
# Validate
for f in ss*; do cd $f; ./validate.sh>/dev/null; echo $?; cd ..; done
# Wipe extra stuff, keep only final results in gold
rm -rfv */gold/*[0-9]
rm -rfv */run
# Archive
tar cfv StereoPipelineTest.tar StereoPipelineTest
gh release create 0.0.1 StereoPipelineTest.tar -R https://github.com/NeoGeographyToolkit/StereoPipelineTest --title smallTestSet --notes "A small subset of the nightly tests, used as a sanity check for the build. To be run in the cloud for macOS. The full test suite will be run on Linux locally." 

# Wipe release (needed before recreating it)
gh release delete 0.0.1 -R https://github.com/NeoGeographyToolkit/StereoPipelineTest

# ssh with the command provided in the browser
# This action will drop one in /Users/runner/work/StereoPipeline/StereoPipeline

conda env create -n asp_deps -f conda/asp_deps_3.3.0_osx_env.yaml
# Gets installed in /usr/local. Will be wiped when the runner exists. This
# is for now a proof of concent. Will have to be cached

# Make python build
# Use the same python and numpy is in the aps_deps env
conda create -n python_isis8 python=3.9.17 numpy=1.25.2 -y

# Now make private: into public: in UsgsAstroFrameSensorModel.h
# Otherwise it won't compile
perl -pi -e 's/private:/public:/g' /usr/local/miniconda/envs/asp_deps/include/usgscsm/UsgsAstroFrameSensorModel.h

# Env for pytest
conda create -n pytest pytest pytest-xdist pytest-timeout
 
#du -sh /usr/local/miniconda/envs
#4.0G    /usr/local/miniconda/envs

# GitHub allows a max of 10 GB for the cache, so we are good.

# Set up the compiler
isMac=$(uname -s | grep Darwin)
if [ "$isMac" != "" ]; then
  cc_comp=clang
  cxx_comp=clang++
else
  cc_comp=x86_64-conda_cos6-linux-gnu-gcc
  cxx_comp=x86_64-conda_cos6-linux-gnu-g++
fi

# Build visionworkbench
aspRepoDir=$(pwd) # /Users/runner/work/StereoPipeline/StereoPipeline
baseDir=$HOME/work/StereoPipeline
installDir=$baseDir/install/StereoPipeline-OSX
envPath=/usr/local/miniconda/envs/asp_deps
mkdir -p $baseDir
cd $baseDir
git clone https://github.com/visionworkbench/visionworkbench.git
cd visionworkbench
# The two lines below should not be necessary with latest release
# conda install -c conda-forge "cmake>=3.15.5" pbzip2 -y
# conda install -c conda-forge compilers -y
mkdir -p build
cd build
$envPath/bin/cmake ..                             \
  -DASP_DEPS_DIR=$envPath                         \
  -DCMAKE_VERBOSE_MAKEFILE=ON                     \
  -DCMAKE_INSTALL_PREFIX=$installDir              \
  -DCMAKE_C_COMPILER=${envPath}/bin/$cc_comp      \
  -DCMAKE_CXX_COMPILER=${envPath}/bin/$cxx_comp
make -j10 && make install

# Build stereo pipeline. 

cd $aspRepoDir
mkdir -p build
cd build
$envPath/bin/cmake ..                             \
  -DASP_DEPS_DIR=$envPath                         \
  -DCMAKE_VERBOSE_MAKEFILE=ON                     \
  -DCMAKE_INSTALL_PREFIX=$installDir              \
  -DVISIONWORKBENCH_INSTALL_DIR=$installDir       \
  -DCMAKE_C_COMPILER=${envPath}/bin/$cc_comp      \
  -DCMAKE_CXX_COMPILER=${envPath}/bin/$cxx_comp
make -j10 && make install

# Now package with bb
cd $baseDir
git clone https://github.com/NeoGeographyToolkit/BinaryBuilder
cd BinaryBuilder
./make-dist.py $installDir \
  --asp-deps-dir $envPath  \
  --python-env /usr/local/miniconda/envs/python_isis8

# packageDir will later be uploaded, as set in the yml file
packageDir=$baseDir/packages 
mkdir -p $packageDir
mv -fv Stereo* $packageDir

cd $baseDir
wget https://github.com/NeoGeographyToolkit/StereoPipelineTest/releases/download/0.0.1/StereoPipelineTest.tar.bz2
tar xjfv StereoPipelineTest.tar.bz2

cd $packageDir
tarBall=$(ls StereoPipeline-*OSX.tar.bz2)

tar xjfv $tarBall
binDir=$HOME/$buildDir/$tarBall
binDir=${binDir/.tar.bz2/}
if [ ! -e "$binDir" ]; then
    echo "Error: Directory: $binDir does not exist"
    echo "$tarBall test_done $status" > $HOME/$buildDir/$statusFile
    exit 1
fi

# How to deal with not finding libGL. Add this to C++ linking.
# -Wl,-rpath-link -Wl,/home/oalexan1/miniconda3/envs/asp_deps/lib -Wl,-rpath-link -Wl,/lib64

fi # end test block
